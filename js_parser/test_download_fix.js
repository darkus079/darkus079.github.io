const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
const testFileName = 'test_file_–ê123456_2024-01-15.pdf';
const testFilePath = path.join(__dirname, 'files', testFileName);

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const filesDir = path.join(__dirname, 'files');
if (!fs.existsSync(filesDir)) {
    fs.mkdirSync(filesDir, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
const testContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∏';
fs.writeFileSync(testFilePath, testContent);

console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', testFilePath);
console.log('üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', fs.statSync(testFilePath).size, '–±–∞–π—Ç');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
const express = require('express');
const app = express();

const FILES_DIR = path.join(__dirname, 'files');

app.get('/api/files', (req, res) => {
    try {
        const files = fs.readdirSync(FILES_DIR).filter(file => {
            const filePath = path.join(FILES_DIR, file);
            return fs.statSync(filePath).isFile();
        });
        res.json({ files });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
        res.json({ files: [] });
    }
});

app.get('/api/download/:filename', (req, res) => {
    const filename = decodeURIComponent(req.params.filename);
    const filePath = path.join(FILES_DIR, filename);
    
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filename}`);
    console.log(`üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${filePath}`);
    
    if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        return res.status(404).json({ message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${filename}`);
    res.download(filePath, filename);
});

app.get('/api/file-info/:filename', (req, res) => {
    const filename = decodeURIComponent(req.params.filename);
    const filePath = path.join(FILES_DIR, filename);
    
    if (!fs.existsSync(filePath)) {
        return res.status(404).json({ message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const stats = fs.statSync(filePath);
    res.json({
        name: filename,
        size: stats.size,
        created: stats.birthtime.toISOString(),
        modified: stats.mtime.toISOString()
    });
});

const PORT = 3001;
app.listen(PORT, () => {
    console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${PORT}/api/files`);
    console.log(`üì• –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: http://localhost:${PORT}/api/download/${encodeURIComponent(testFileName)}`);
    console.log(`‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ: http://localhost:${PORT}/api/file-info/${encodeURIComponent(testFileName)}`);
});
