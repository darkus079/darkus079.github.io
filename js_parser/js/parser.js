/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä kad.arbitr.ru –¥–ª—è GitHub Pages
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
 */

class KadArbitrParser {
    constructor() {
        this.isProcessing = false;
        this.downloadedFiles = [];
        this.logger = new Logger();
        this.corsProxy = 'https://api.allorigins.win/raw?url=';
    }

    async parseCase(caseNumber, progressCallback) {
        if (this.isProcessing) {
            throw new Error('–ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
        }

        this.isProcessing = true;
        this.downloadedFiles = [];
        
        this.logger.info(`üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê: ${caseNumber}`);

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright
            if (progressCallback) progressCallback('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
            this.logger.info('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
            
            const { chromium } = await this.loadPlaywright();
            const browser = await chromium.launch({
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu',
                    '--disable-web-security',
                    '--disable-features=VizDisplayCompositor',
                    '--window-size=1920,1080'
                ]
            });

            const context = await browser.newContext({
                viewport: { width: 1920, height: 1080 },
                userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            });

            const page = await context.newPage();
            
            // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await page.addInitScript(() => {
                Object.defineProperty(navigator, 'webdriver', {
                    get: () => undefined,
                });
                
                delete navigator.__proto__.webdriver;
                
                window.chrome = {
                    runtime: {},
                    loadTimes: function() {},
                    csi: function() {},
                    app: {}
                };
                
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['ru-RU', 'ru', 'en-US', 'en']
                });
            });

            // –ü–æ–∏—Å–∫ –¥–µ–ª–∞
            if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –¥–µ–ª–∞...');
            this.logger.info('üîç –ü–æ–∏—Å–∫ –¥–µ–ª–∞...');
            
            const caseLinks = await this.searchCase(page, caseNumber, progressCallback);
            
            if (caseLinks.length === 0) {
                throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞
            const caseUrl = caseLinks[0].url;
            this.logger.info(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–∞: ${caseLinks[0].text}`);
            
            if (progressCallback) progressCallback('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
            this.downloadedFiles = await this.downloadPdfFiles(page, caseUrl, caseNumber, progressCallback);

            await browser.close();
            
            this.logger.info(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.downloadedFiles.length}`);
            return this.downloadedFiles;

        } catch (error) {
            this.logger.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`);
            throw error;
        } finally {
            this.isProcessing = false;
        }
    }

    async loadPlaywright() {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ Playwright
        if (typeof window !== 'undefined') {
            // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º CDN
            return new Promise((resolve, reject) => {
                const script = document.createElement('script');
                script.src = 'https://unpkg.com/playwright@1.40.0/lib/browser.js';
                script.onload = () => {
                    resolve(window.playwright);
                };
                script.onerror = () => {
                    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API
                    this.logger.warn('Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API');
                    resolve({ chromium: null });
                };
                document.head.appendChild(script);
            });
        } else {
            // –í Node.js
            return require('playwright');
        }
    }

    async searchCase(page, caseNumber, progressCallback) {
        try {
            this.logger.info(`üéØ –ü–æ–∏—Å–∫ –¥–µ–ª–∞: ${caseNumber}`);
            
            if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç kad.arbitr.ru...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            const proxyUrl = this.corsProxy + encodeURIComponent('https://kad.arbitr.ru/');
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç —á–µ—Ä–µ–∑ proxy
            await page.goto(proxyUrl, { 
                waitUntil: 'networkidle',
                timeout: 30000 
            });
            
            await this.humanDelay(2, 4, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            
            if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞...');
            
            // –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
            await page.waitForSelector('input[type="text"]', { timeout: 10000 });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –¥–µ–ª–∞
            await page.click('input[type="text"]');
            await page.keyboard.press('Control+a');
            await page.type('input[type="text"]', caseNumber);
            
            await this.humanDelay(1, 2, '–≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞');
            
            if (progressCallback) progressCallback('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞...');
            
            // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
            await page.click('button[type="submit"]');
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            await page.waitForLoadState('networkidle', { timeout: 15000 });
            
            if (progressCallback) progressCallback('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
            
            // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ–ª–∞
            const caseLinks = await page.evaluate(() => {
                const links = [];
                const elements = document.querySelectorAll('a[href*="/card/"]');
                
                elements.forEach(element => {
                    const href = element.getAttribute('href');
                    const text = element.textContent.trim();
                    if (href && text) {
                        links.push({
                            url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
                            text: text
                        });
                    }
                });
                
                return links;
            });
            
            if (caseLinks.length === 0) {
                throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            this.logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: ${caseLinks.length}`);
            return caseLinks;
            
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞: ${error.message}`);
            // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ fetch API
            return await this.searchCaseFallback(caseNumber, progressCallback);
        }
    }

    async searchCaseFallback(caseNumber, progressCallback) {
        try {
            this.logger.info('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞...');
            
            if (progressCallback) progressCallback('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch API —Å CORS proxy
            const searchUrl = `https://kad.arbitr.ru/search?query=${encodeURIComponent(caseNumber)}`;
            const proxyUrl = this.corsProxy + encodeURIComponent(searchUrl);
            
            const response = await fetch(proxyUrl);
            const html = await response.text();
            
            // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const links = [];
            
            const elements = doc.querySelectorAll('a[href*="/card/"]');
            elements.forEach(element => {
                const href = element.getAttribute('href');
                const text = element.textContent.trim();
                if (href && text) {
                    links.push({
                        url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
                        text: text
                    });
                }
            });
            
            if (links.length === 0) {
                throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ fallback –º–µ—Ç–æ–¥');
            }
            
            this.logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª —á–µ—Ä–µ–∑ fallback: ${links.length}`);
            return links;
            
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: ${error.message}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }

    async downloadPdfFiles(page, caseUrl, caseNumber, progressCallback) {
        try {
            this.logger.info(`üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É: ${caseUrl}`);
            
            if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS proxy
            const proxyUrl = this.corsProxy + encodeURIComponent(caseUrl);
            await page.goto(proxyUrl, { 
                waitUntil: 'networkidle',
                timeout: 30000 
            });
            
            await this.humanDelay(2, 3, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ª–∞');
            
            if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –≤–∫–ª–∞–¥–∫–∏ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"...');
            
            // –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"
            try {
                await page.waitForSelector('div.b-case-chrono-button-text', { timeout: 10000 });
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"
                const electronicTab = await page.evaluateHandle(() => {
                    const buttons = Array.from(document.querySelectorAll('div.b-case-chrono-button-text'));
                    return buttons.find(btn => btn.textContent.includes('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ'));
                });
                
                if (electronicTab) {
                    await electronicTab.click();
                    this.logger.info('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"');
                } else {
                    throw new Error('–í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
                
            } catch (error) {
                this.logger.warn('‚ùå –í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', error);
                throw new Error('–í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }
            
            await this.humanDelay(2, 3, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
            
            if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
            
            // –ò—â–µ–º PDF —Å—Å—ã–ª–∫–∏
            const pdfLinks = await page.evaluate(() => {
                const links = [];
                const elements = document.querySelectorAll('a[href*=".pdf"], a[href*="document"]');
                
                elements.forEach(element => {
                    const href = element.getAttribute('href');
                    const text = element.textContent.trim();
                    if (href && text) {
                        links.push({
                            url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
                            text: text
                        });
                    }
                });
                
                return links;
            });
            
            if (pdfLinks.length === 0) {
                throw new Error('PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            this.logger.info(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pdfLinks.length}`);
            
            if (progressCallback) progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${pdfLinks.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`);
            
            const downloadedFiles = [];
            
            // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π PDF —Ñ–∞–π–ª
            for (let i = 0; i < pdfLinks.length; i++) {
                const link = pdfLinks[i];
                
                try {
                    if (progressCallback) {
                        progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1} –∏–∑ ${pdfLinks.length}...`);
                    }
                    
                    this.logger.info(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${link.text}`);
                    
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    const timestamp = new Date().toISOString().split('T')[0];
                    const filename = `${caseNumber}_${timestamp}_${i + 1}_${this.sanitizeFilename(link.text)}.pdf`;
                    
                    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ CORS proxy
                    const pdfProxyUrl = this.corsProxy + encodeURIComponent(link.url);
                    const response = await fetch(pdfProxyUrl);
                    
                    if (response.ok) {
                        const blob = await response.blob();
                        
                        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = filename;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                        
                        downloadedFiles.push(filename);
                        this.logger.info(`‚úÖ –°–∫–∞—á–∞–Ω: ${filename}`);
                    } else {
                        this.logger.warn(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${link.text}`);
                    }
                    
                    await this.humanDelay(1, 2, '–ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏');
                    
                } catch (error) {
                    this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${link.text}: ${error.message}`);
                }
            }
            
            this.logger.info(`‚úÖ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
            return downloadedFiles;
            
        } catch (error) {
            this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤: ${error.message}`);
            throw error;
        }
    }

    sanitizeFilename(filename) {
        return filename
            .replace(/[<>:"/\\|?*]/g, '_')
            .replace(/\s+/g, '_')
            .substring(0, 100);
    }

    async humanDelay(min, max, description = '') {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        this.logger.info(`‚è≥ ${description} (${delay}—Å)`);
        await new Promise(resolve => setTimeout(resolve, delay * 1000));
    }
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class Logger {
    constructor() {
        this.logs = [];
        this.maxLogs = 100;
    }

    log(level, message) {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = {
            timestamp,
            level,
            message,
            id: Date.now() + Math.random()
        };
        
        this.logs.push(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
        if (this.logs.length > this.maxLogs) {
            this.logs.shift();
        }
        
        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        console.log(`[${timestamp}] ${level}: ${message}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUI();
    }

    info(message) {
        this.log('INFO', message);
    }

    error(message) {
        this.log('ERROR', message);
    }

    warn(message) {
        this.log('WARN', message);
    }

    updateUI() {
        const logPanel = document.getElementById('logPanel');
        const logEntries = document.getElementById('logEntries');
        
        if (logPanel && logEntries) {
            logPanel.style.display = 'block';
            logEntries.innerHTML = this.logs.map(log => 
                `<div class="log-entry ${log.level.toLowerCase()}">[${log.timestamp}] ${log.level}: ${log.message}</div>`
            ).join('');
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            logPanel.scrollTop = logPanel.scrollHeight;
        }
    }
}