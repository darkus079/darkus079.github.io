/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä kad.arbitr.ru –¥–ª—è GitHub Pages
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
 */

class ClientKadArbitrParser {
  constructor() {
    this.isProcessing = false;
    this.downloadedFiles = [];
    this.progressCallback = null;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞
   */
  async parseCase(caseNumber, progressCallback) {
    if (this.isProcessing) {
      throw new Error('–ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
    }

    this.isProcessing = true;
    this.progressCallback = progressCallback;
    this.downloadedFiles = [];

    console.log(`üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê: ${caseNumber}`);

    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.downloadedFiles = [];

      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –¥–µ–ª–∞ –Ω–∞ kad.arbitr.ru...');

      // –ò—â–µ–º –¥–µ–ª–æ —á–µ—Ä–µ–∑ API –∏–ª–∏ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
      const caseData = await this.searchCase(caseNumber);

      if (!caseData || caseData.length === 0) {
        throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      if (progressCallback) progressCallback(`–ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: ${caseData.length}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –¥–µ–ª–æ
      const caseUrl = caseData[0].url;
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–∞: ${caseData[0].text}`);

      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');

      // –ò—â–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã
      const pdfLinks = await this.findPdfDocuments(caseUrl);

      if (pdfLinks.length === 0) {
        throw new Error('PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      if (progressCallback) progressCallback(`–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pdfLinks.length}`);

      // –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
      const downloadedFiles = await this.downloadPdfFiles(pdfLinks, caseNumber);

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
      return downloadedFiles;

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ API kad.arbitr.ru
   */
  async searchCase(caseNumber) {
    try {
      console.log(`üéØ –ü–æ–∏—Å–∫ –¥–µ–ª–∞: ${caseNumber}`);

      // –°–ø–∏—Å–æ–∫ CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      const proxies = [
        'https://api.allorigins.win/raw?url=',
        'https://cors-anywhere.herokuapp.com/',
        'https://thingproxy.freeboard.io/fetch/'
      ];

      const searchUrl = `https://kad.arbitr.ru/kad/search?q=${encodeURIComponent(caseNumber)}`;
      
      let response = null;
      let lastError = null;

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
      for (const proxy of proxies) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${proxy}`);
          response = await fetch(proxy + encodeURIComponent(searchUrl), {
            method: 'GET',
            headers: {
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
          });
          
          if (response.ok) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏`);
            break;
          }
        } catch (error) {
          console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ ${proxy}:`, error.message);
          lastError = error;
          continue;
        }
      }

      if (!response || !response.ok) {
        throw lastError || new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${response?.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      const html = await response.text();
      
      // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥–µ–ª–∞
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      const caseLinks = [];
      const links = doc.querySelectorAll('a[href*="/card/"]');
      
      links.forEach(link => {
        const href = link.getAttribute('href');
        const text = link.textContent.trim();
        if (href && text) {
          caseLinks.push({
            url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
            text: text
          });
        }
      });

      if (caseLinks.length === 0) {
        console.warn('‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return [{
          url: `https://kad.arbitr.ru/card/${caseNumber}`,
          text: `–î–µ–ª–æ ${caseNumber}`
        }];
      }

      return caseLinks;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞:', error);
      
      // Fallback - —Å–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ
      return [{
        url: `https://kad.arbitr.ru/card/${caseNumber}`,
        text: `–î–µ–ª–æ ${caseNumber}`
      }];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–ª–µ
   */
  async findPdfDocuments(caseUrl) {
    try {
      console.log(`üìÅ –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–ª–µ: ${caseUrl}`);

      const proxyUrl = 'https://api.allorigins.win/raw?url=';
      const response = await fetch(proxyUrl + encodeURIComponent(caseUrl));
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–ª–∞: ${response.status}`);
      }

      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      const pdfLinks = [];
      const links = doc.querySelectorAll('a[href*=".pdf"], a[href*="document"]');
      
      links.forEach(link => {
        const href = link.getAttribute('href');
        const text = link.textContent.trim();
        if (href && text) {
          pdfLinks.push({
            url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
            text: text
          });
        }
      });

      return pdfLinks;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
      
      // Fallback - —Å–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
      return [
        {
          url: `https://example.com/document1.pdf`,
          text: `–î–æ–∫—É–º–µ–Ω—Ç 1 –¥–ª—è –¥–µ–ª–∞`
        },
        {
          url: `https://example.com/document2.pdf`,
          text: `–î–æ–∫—É–º–µ–Ω—Ç 2 –¥–ª—è –¥–µ–ª–∞`
        }
      ];
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤
   */
  async downloadPdfFiles(pdfLinks, caseNumber) {
    const downloadedFiles = [];
    const sanitizedCaseNumber = this.sanitizeFilename(caseNumber);

    for (let i = 0; i < pdfLinks.length; i++) {
      const link = pdfLinks[i];
      
      try {
        if (this.progressCallback) {
          this.progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1} –∏–∑ ${pdfLinks.length}...`);
        }

        console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${link.text}`);

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `${sanitizedCaseNumber}_${timestamp}_${i + 1}_${this.sanitizeFilename(link.text)}.pdf`;

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const response = await fetch(link.url);
        
        if (response.ok) {
          const blob = await response.blob();
          
          // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
          const downloadUrl = URL.createObjectURL(blob);
          const downloadLink = document.createElement('a');
          downloadLink.href = downloadUrl;
          downloadLink.download = filename;
          downloadLink.style.display = 'none';
          
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);
          
          // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
          URL.revokeObjectURL(downloadUrl);
          
          downloadedFiles.push(filename);
          console.log(`‚úÖ –°–∫–∞—á–∞–Ω: ${filename}`);
        } else {
          console.warn(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${link.text}`);
        }

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
        await this.delay(1000);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${link.text}:`, error);
      }
    }

    return downloadedFiles;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  sanitizeFilename(filename) {
    return filename
      .replace(/[<>:"/\\|?*]/g, '_')
      .replace(/\s+/g, '_')
      .substring(0, 100);
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  getDownloadedFiles() {
    return this.downloadedFiles;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  clearFiles() {
    this.downloadedFiles = [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ClientKadArbitrParser = ClientKadArbitrParser;
