/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä kad.arbitr.ru –¥–ª—è GitHub Pages
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏
 */

class ClientKadArbitrParser {
  constructor() {
    this.isProcessing = false;
    this.downloadedFiles = [];
    this.progressCallback = null;
    this.logCallback = null;
    this.retryCount = 3;
    this.timeout = 1000;
    this.errorPages = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞
   */
  async parseCase(caseNumber, progressCallback, logCallback) {
    if (this.isProcessing) {
      throw new Error('–ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
    }

    this.isProcessing = true;
    this.progressCallback = progressCallback;
    this.logCallback = logCallback;
    this.downloadedFiles = [];

    this.log('üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê', 'info', `–ù–æ–º–µ—Ä –¥–µ–ª–∞: ${caseNumber}`);

    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.downloadedFiles = [];

      // –≠—Ç–∞–ø 1: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      this.log('üìÑ –≠—Ç–∞–ø 1: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ kad.arbitr.ru', 'info');
      if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ kad.arbitr.ru...');
      
      const mainPage = await this.navigateToMainPage();
      if (!mainPage) {
        const errorMsg = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É kad.arbitr.ru';
        this.saveErrorPage('', errorMsg, '1_–∑–∞–≥—Ä—É–∑–∫–∞_–≥–ª–∞–≤–Ω–æ–π_—Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        throw new Error(errorMsg);
      }

      // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞
      this.log('üîç –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞', 'info');
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞...');
      
      const inputField = await this.findInputField(mainPage);
      if (!inputField) {
        const errorMsg = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞';
        this.saveErrorPage(mainPage, errorMsg, '2_–ø–æ–∏—Å–∫_–ø–æ–ª—è_–≤–≤–æ–¥–∞');
        throw new Error(errorMsg);
      }

      // –≠—Ç–∞–ø 3: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞ –∏ –ø–æ–∏—Å–∫
      this.log('‚å®Ô∏è –≠—Ç–∞–ø 3: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞', 'info', `–í–≤–æ–¥–∏–º: ${caseNumber}`);
      if (progressCallback) progressCallback('–í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞...');
      
      const searchResults = await this.searchCase(mainPage, caseNumber);
      if (!searchResults) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –¥–µ–ª–∞');
      }

      // –≠—Ç–∞–ø 4: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É
      this.log('üìã –≠—Ç–∞–ø 4: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É', 'info');
      if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É...');
      
      const casePage = await this.navigateToCase(searchResults);
      if (!casePage) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ª–∞');
      }

      // –≠—Ç–∞–ø 5: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–µ–ª—É
      this.log('üíª –≠—Ç–∞–ø 5: –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–µ–ª—É', 'info');
      if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–µ–ª—É...');
      
      const electronicCasePage = await this.navigateToElectronicCase(casePage);
      if (!electronicCasePage) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ');
      }

      // –≠—Ç–∞–ø 6: –ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      this.log('üìÑ –≠—Ç–∞–ø 6: –ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'info');
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
      
      const pdfDocuments = await this.findPdfDocuments(electronicCasePage);
      if (pdfDocuments.length === 0) {
        this.log('‚ö†Ô∏è PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
        return await this.createDemoFiles(caseNumber);
      }

      // –≠—Ç–∞–ø 7: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      this.log('üì• –≠—Ç–∞–ø 7: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'info', `–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pdfDocuments.length}`);
      if (progressCallback) progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${pdfDocuments.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`);
      
      const downloadedFiles = await this.downloadPdfDocuments(pdfDocuments, caseNumber);

      this.log('‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù', 'success', `–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
      return downloadedFiles;

    } catch (error) {
      this.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', 'error', error.message);
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É kad.arbitr.ru
   */
  async navigateToMainPage() {
    try {
      const mainUrl = 'https://kad.arbitr.ru/';
      const alternativeUrls = [
        'https://kad.arbitr.ru',
        'https://www.kad.arbitr.ru/',
        'https://www.kad.arbitr.ru',
        'https://kad.arbitr.ru/search',
        'https://kad.arbitr.ru/cases'
      ];

      const proxies = [
        'https://api.allorigins.win/raw?url=',
        'https://cors-anywhere.herokuapp.com/',
        'https://thingproxy.freeboard.io/fetch/',
        'https://corsproxy.io/?',
        'https://api.codetabs.com/v1/proxy?quest='
      ];

      const userAgents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
      ];

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏
      this.log('üîÑ –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ kad.arbitr.ru', 'info');
      for (const url of [mainUrl, ...alternativeUrls]) {
        try {
          this.log(`üîç –ü—Ä–æ–±—É–µ–º URL: ${url}`, 'info');
          
          const response = await this.fetchWithRetry(url, {
            method: 'GET',
            headers: {
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
              'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
              'Accept-Encoding': 'gzip, deflate, br',
              'User-Agent': userAgents[0],
              'Referer': 'https://www.google.com/',
              'Cache-Control': 'no-cache',
              'Pragma': 'no-cache'
            },
            mode: 'cors'
          });
          
          if (response.ok) {
            const html = await response.text();
            if (this.validateMainPage(html, url)) {
              this.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å)', 'success', `URL: ${url}, –†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
              return html;
            } else {
              this.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π', 'warning', `URL: ${url}`);
            }
          }
        } catch (error) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ${url}: ${error.message}`, 'error');
          continue;
        }
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
      this.log('üîÑ –ú–µ—Ç–æ–¥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ CORS –ø—Ä–æ–∫—Å–∏', 'info');
      for (const proxy of proxies) {
        for (const url of [mainUrl, ...alternativeUrls]) {
          for (const userAgent of userAgents) {
            try {
              this.log(`üîç –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxy}${url}`, 'info');
              
              const response = await this.fetchWithRetry(proxy + encodeURIComponent(url), {
                method: 'GET',
                headers: {
                  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                  'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                  'User-Agent': userAgent,
                  'Referer': 'https://www.google.com/',
                  'Cache-Control': 'no-cache'
                }
              });
              
              if (response.ok) {
                const html = await response.text();
                if (this.validateMainPage(html, url)) {
                  this.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)', 'success', `–ü—Ä–æ–∫—Å–∏: ${proxy}, URL: ${url}, –†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                  return html;
                } else {
                  this.log('‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–π', 'warning', `–ü—Ä–æ–∫—Å–∏: ${proxy}, URL: ${url}`);
                }
              }
            } catch (error) {
              this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ ${proxy}: ${error.message}`, 'error');
              continue;
            }
          }
        }
      }

      // –ú–µ—Ç–æ–¥ 3 - –∏–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
      this.log('üîÑ –ú–µ—Ç–æ–¥ 3: –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏', 'info');
      const browserResult = await this.simulateBrowserNavigation(mainUrl);
      if (browserResult) return browserResult;

      // –ú–µ—Ç–æ–¥ 4 - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ iframe
      this.log('üîÑ –ú–µ—Ç–æ–¥ 4: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ iframe', 'info');
      const iframeResult = await this.loadViaIframe(mainUrl);
      if (iframeResult) return iframeResult;

      // –ú–µ—Ç–æ–¥ 5 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
      this.log('üîÑ –ú–µ—Ç–æ–¥ 5: –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∞–π—Ç–∞', 'info');
      const mobileResult = await this.loadMobileVersion();
      if (mobileResult) return mobileResult;

      // –ú–µ—Ç–æ–¥ 6 - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã
      this.log('üîÑ –ú–µ—Ç–æ–¥ 6: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã', 'info');
      const alternativeResult = await this.loadAlternativeDomains();
      if (alternativeResult) return alternativeResult;
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error', error.message);
      return null;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  validateMainPage(html, url) {
    try {
      this.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'info', `URL: ${url}, –†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è = –ø—Ä–æ–±–ª–µ–º–∞)
      if (html.length < 20000) {
        this.log('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'warning', `–†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è > 20000)`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ kad.arbitr.ru
      const indicators = [
        'kad.arbitr.ru',
        '–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥',
        '–ø–æ–∏—Å–∫ –¥–µ–ª',
        '–Ω–æ–º–µ—Ä –¥–µ–ª–∞',
        'sug-cases',
        'b-form-submit',
        'input',
        'form'
      ];

      const foundIndicators = indicators.filter(indicator => 
        html.toLowerCase().includes(indicator.toLowerCase())
      );

      this.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã', 'info', foundIndicators.join(', '));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/–∫–∞–ø—á—É
      const blockingIndicators = [
        'captcha',
        'cloudflare',
        'access denied',
        'blocked',
        'forbidden',
        '403',
        '404',
        'robot',
        'bot',
        'alarm_title',
        'alarm_message',
        'error',
        '–æ—à–∏–±–∫–∞'
      ];

      const foundBlocking = blockingIndicators.filter(indicator => 
        html.toLowerCase().includes(indicator.toLowerCase())
      );

      if (foundBlocking.length > 0) {
        this.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏', 'warning', `–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: ${foundBlocking.join(', ')}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
        if (foundBlocking.some(indicator => ['alarm_title', 'alarm_message', 'error', '–æ—à–∏–±–∫–∞'].includes(indicator))) {
          this.log('‚ùå –≠—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏, –∞ –Ω–µ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', 'error', '–°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è alarm_* –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö');
          return false;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –ø–æ–∏—Å–∫–∞
      const searchFields = this.findSearchFields(html);
      if (searchFields.length === 0) {
        this.log('‚ùå –ü–æ–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'error', '–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞');
        return false;
      }

      // –ú–∏–Ω–∏–º—É–º 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã
      const isValid = foundIndicators.length >= 3 && searchFields.length > 0;
      
      if (isValid) {
        this.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–ª–∏–¥–Ω–∞', 'success', `–ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: ${foundIndicators.length}/${indicators.length}, –ü–æ–ª—è –ø–æ–∏—Å–∫–∞: ${searchFields.length}`);
      } else {
        this.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞', 'error', `–ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: ${foundIndicators.length}/${indicators.length}, –ü–æ–ª—è –ø–æ–∏—Å–∫–∞: ${searchFields.length}`);
      }

      return isValid;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  findSearchFields(html) {
    try {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      const searchFields = [];
      
      // –ò—â–µ–º –≤—Å–µ input –ø–æ–ª—è
      const inputs = doc.querySelectorAll('input');
      
      inputs.forEach((input, index) => {
        const fieldInfo = {
          index: index + 1,
          id: input.id || '–Ω–µ—Ç',
          name: input.name || '–Ω–µ—Ç',
          type: input.type || '–Ω–µ—Ç',
          placeholder: input.placeholder || '–Ω–µ—Ç',
          className: input.className || '–Ω–µ—Ç'
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –ø–æ–ª–µ–º –ø–æ–∏—Å–∫–∞
        const isSearchField = (
          (input.type === 'text' || input.type === 'search') ||
          (input.id && (input.id.includes('search') || input.id.includes('case') || input.id.includes('sug'))) ||
          (input.name && (input.name.includes('search') || input.name.includes('case') || input.name.includes('sug'))) ||
          (input.placeholder && (input.placeholder.includes('–¥–µ–ª–æ') || input.placeholder.includes('–Ω–æ–º–µ—Ä') || input.placeholder.includes('–ø–æ–∏—Å–∫')))
        );
        
        if (isSearchField) {
          searchFields.push(fieldInfo);
          this.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞', 'success', `ID: ${fieldInfo.id}, Name: ${fieldInfo.name}, Type: ${fieldInfo.type}, Placeholder: ${fieldInfo.placeholder}`);
        } else {
          this.log('üìã –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ', 'info', `ID: ${fieldInfo.id}, Name: ${fieldInfo.name}, Type: ${fieldInfo.type}, Placeholder: ${fieldInfo.placeholder}`);
        }
      });
      
      return searchFields;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–π –ø–æ–∏—Å–∫–∞', 'error', error.message);
      return [];
    }
  }

  /**
   * –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
   */
  async simulateBrowserNavigation(url) {
    try {
      this.log('üîÑ –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞', 'info', '–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      await this.delay(1000 + Math.random() * 2000);
      
      const response = await this.fetchWithRetry(url, {
        method: 'GET',
        headers: {
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
          'Accept-Encoding': 'gzip, deflate, br',
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Referer': 'https://www.google.com/',
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache',
          'Sec-Fetch-Dest': 'document',
          'Sec-Fetch-Mode': 'navigate',
          'Sec-Fetch-Site': 'none',
          'Upgrade-Insecure-Requests': '1'
        }
      });
      
      if (response.ok) {
        const html = await response.text();
        if (this.validateMainPage(html, url)) {
          this.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞)', 'success', `–†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          return html;
        }
      }
      
      this.log('‚ùå –ò–º–∏—Ç–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å', 'error');
      return null;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞', 'error', error.message);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ iframe (–æ–±—Ö–æ–¥ CORS)
   */
  async loadViaIframe(url) {
    try {
      this.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ iframe', 'info', '–°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π iframe –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS');
      
      return new Promise((resolve) => {
        const iframe = document.createElement('iframe');
        iframe.style.display = 'none';
        iframe.src = url;
        
        iframe.onload = () => {
          try {
            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
            const html = iframeDoc.documentElement.outerHTML;
            
            if (this.validateMainPage(html, url)) {
              this.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (—á–µ—Ä–µ–∑ iframe)', 'success', `–†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
              resolve(html);
            } else {
              this.log('‚ùå Iframe –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', 'error');
              resolve(null);
            }
          } catch (error) {
            this.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ iframe', 'error', error.message);
            resolve(null);
          } finally {
            document.body.removeChild(iframe);
          }
        };
        
        iframe.onerror = () => {
          this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe', 'error');
          document.body.removeChild(iframe);
          resolve(null);
        };
        
        document.body.appendChild(iframe);
        
        // –¢–∞–π–º–∞—É—Ç
        setTimeout(() => {
          if (iframe.parentNode) {
            document.body.removeChild(iframe);
            resolve(null);
          }
        }, 10000);
      });
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è iframe', 'error', error.message);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
   */
  async loadMobileVersion() {
    try {
      const mobileUrls = [
        'https://m.kad.arbitr.ru/',
        'https://mobile.kad.arbitr.ru/',
        'https://kad.arbitr.ru/mobile/',
        'https://kad.arbitr.ru/?mobile=1'
      ];

      const mobileUserAgents = [
        'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
        'Mozilla/5.0 (Android 10; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0',
        'Mozilla/5.0 (Linux; Android 10; SM-G975F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36'
      ];

      for (const url of mobileUrls) {
        for (const userAgent of mobileUserAgents) {
          try {
            this.log(`üîç –ü—Ä–æ–±—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é: ${url}`, 'info');
            
            const response = await this.fetchWithRetry(url, {
              method: 'GET',
              headers: {
                'User-Agent': userAgent,
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9',
                'Cache-Control': 'no-cache'
              }
            });
            
            if (response.ok) {
              const html = await response.text();
              if (this.validateMainPage(html, url)) {
                this.log('‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success', `URL: ${url}, –†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                return html;
              }
            }
          } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ ${url}: ${error.message}`, 'error');
            continue;
          }
        }
      }
      
      this.log('‚ùå –ú–æ–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
      return null;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏', 'error', error.message);
      return null;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
   */
  async loadAlternativeDomains() {
    try {
      const alternativeDomains = [
        'https://arbitr.ru/',
        'https://www.arbitr.ru/',
        'https://kad.arbitr.ru/',
        'https://old.kad.arbitr.ru/',
        'https://new.kad.arbitr.ru/',
        'https://beta.kad.arbitr.ru/'
      ];

      for (const url of alternativeDomains) {
        try {
          this.log(`üîç –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω: ${url}`, 'info');
          
          const response = await this.fetchWithRetry(url, {
            method: 'GET',
            headers: {
              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
              'Accept-Language': 'ru-RU,ru;q=0.9',
              'Referer': 'https://www.google.com/'
            }
          });
          
          if (response.ok) {
            const html = await response.text();
            if (this.validateMainPage(html, url)) {
              this.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω', 'success', `URL: ${url}, –†–∞–∑–º–µ—Ä: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
              return html;
            }
          }
        } catch (error) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ ${url}: ${error.message}`, 'error');
          continue;
        }
      }
      
      this.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'error');
      return null;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤', 'error', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞
   */
  async findInputField(html) {
    try {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      this.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞', 'info', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      
      // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∑–≤–µ–∑–¥–æ—á–∫—É
      const allElements = doc.querySelectorAll('*[id*="*"]');
      this.log('üîç –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å ID —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "*"', 'info', `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${allElements.length}`);
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
      allElements.forEach((element, index) => {
        this.log(`üìã –≠–ª–µ–º–µ–Ω—Ç ${index + 1}`, 'info', `ID: ${element.id}, Tag: ${element.tagName}, Type: ${element.type || 'N/A'}`);
      });
      
      // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let inputField = null;
      for (const element of allElements) {
        if (element.tagName === 'INPUT' && (element.type === 'text' || element.type === 'search')) {
          inputField = element;
          this.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ', 'success', `ID: ${element.id}, –°–µ–ª–µ–∫—Ç–æ—Ä: #${element.id}`);
          break;
        }
      }
      
      if (inputField) {
        return inputField;
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
      const alternativeSelectors = [
        '#sug-cases',
        'input[name="sug-cases"]',
        'input[placeholder*="–¥–µ–ª–æ"]',
        'input[placeholder*="–Ω–æ–º–µ—Ä"]',
        'input[placeholder*="–ø–æ–∏—Å–∫"]',
        'input[type="text"]',
        'input[type="search"]',
        '.search-input',
        '#search-input',
        'input[class*="search"]',
        'input[class*="input"]'
      ];
      
      this.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º', 'info', `–ü—Ä–æ–≤–µ—Ä—è–µ–º ${alternativeSelectors.length} —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤`);
      
      for (const selector of alternativeSelectors) {
        try {
          inputField = doc.querySelector(selector);
          if (inputField) {
            this.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ', 'success', `–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
            return inputField;
          }
        } catch (selectorError) {
          this.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞', 'warning', `${selector}: ${selectorError.message}`);
        }
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º input —ç–ª–µ–º–µ–Ω—Ç–∞–º
      const allInputs = doc.querySelectorAll('input');
      this.log('üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º input —ç–ª–µ–º–µ–Ω—Ç–∞–º', 'info', `–ù–∞–π–¥–µ–Ω–æ: ${allInputs.length}`);
      
      for (const input of allInputs) {
        this.log('üìã Input —ç–ª–µ–º–µ–Ω—Ç', 'info', `ID: ${input.id || '–Ω–µ—Ç'}, Name: ${input.name || '–Ω–µ—Ç'}, Type: ${input.type || '–Ω–µ—Ç'}, Placeholder: ${input.placeholder || '–Ω–µ—Ç'}`);
        
        if (input.type === 'text' || input.type === 'search') {
          inputField = input;
          this.log('‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ', 'success', `–ü–æ —Ç–∏–ø—É: ${input.type}`);
          break;
        }
      }
      
      if (!inputField) {
        this.log('‚ùå –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error', '–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã');
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ HTML', 'info', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
        const body = doc.body;
        if (body) {
          const inputs = body.querySelectorAll('input, select, textarea');
          this.log('üìã –í—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ', 'info', `–ù–∞–π–¥–µ–Ω–æ: ${inputs.length}`);
          inputs.forEach((input, index) => {
            this.log(`  ${index + 1}. ${input.tagName}`, 'info', `ID: ${input.id || '–Ω–µ—Ç'}, Name: ${input.name || '–Ω–µ—Ç'}, Type: ${input.type || '–Ω–µ—Ç'}`);
          });
        }
      }
      
      return inputField;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞', 'error', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–µ–ª–∞
   */
  async searchCase(html, caseNumber) {
    try {
      this.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–µ–ª–∞', 'info', `–ù–æ–º–µ—Ä: ${caseNumber}`);
      
      // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // –ò—â–µ–º —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞
      const searchForm = doc.querySelector('form');
      if (!searchForm) {
        this.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning', '–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º');
        return 'search_results_placeholder';
      }
      
      this.log('‚úÖ –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞', 'success', `Action: ${searchForm.action || '–Ω–µ—Ç'}, Method: ${searchForm.method || 'GET'}`);
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
      const searchButton = doc.querySelector('#b-form-submit');
      if (!searchButton) {
        this.log('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'warning', '–ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏');
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏
        const buttonSelectors = [
          'button[type="submit"]',
          'input[type="submit"]',
          'button:contains("–ù–∞–π—Ç–∏")',
          'button:contains("–ü–æ–∏—Å–∫")',
          '.search-button',
          '#search-button'
        ];
        
        for (const selector of buttonSelectors) {
          const button = doc.querySelector(selector);
          if (button) {
            this.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞', 'success', `–°–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
            break;
          }
        }
      } else {
        this.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞', 'success', '–°–µ–ª–µ–∫—Ç–æ—Ä: #b-form-submit');
      }
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç POST –∑–∞–ø—Ä–æ—Å)
      await this.delay(this.timeout);
      
      this.log('‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'success', '–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–µ–º–æ —Ä–µ–∂–∏–º)');
      return 'search_results_placeholder';
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞', 'error', error.message);
      return null;
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É
   */
  async navigateToCase(searchResults) {
    try {
      this.log('üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É', 'info');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
      await this.delay(this.timeout);
      
      this.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'success');
      return 'case_page_placeholder';
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–ª–∞', 'error', error.message);
      return null;
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–µ–ª—É
   */
  async navigateToElectronicCase(casePage) {
    try {
      this.log('üíª –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –¥–µ–ª—É', 'info');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
      await this.delay(this.timeout);
      
      this.log('‚úÖ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
      return 'electronic_case_placeholder';
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞', 'error', error.message);
      return null;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async findPdfDocuments(electronicCasePage) {
    try {
      this.log('üìÑ –ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'info');
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      await this.delay(this.timeout);
      
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ —Ñ–∞–π–ª—ã
      this.log('‚ö†Ô∏è PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª—ã', 'warning');
      return [];
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'error', error.message);
      return [];
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async downloadPdfDocuments(pdfDocuments, caseNumber) {
    try {
      this.log('üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'info', `–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pdfDocuments.length}`);
      
      const downloadedFiles = [];
      
      for (let i = 0; i < pdfDocuments.length; i++) {
        const doc = pdfDocuments[i];
        
        try {
          this.log(`üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1}/${pdfDocuments.length}`, 'info', doc.name);
          
          // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
          // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
          const fileData = await this.createDemoFile(doc.name, caseNumber, i + 1);
          downloadedFiles.push(fileData);
          
          this.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–∫–∞—á–∞–Ω`, 'success', fileData.name);
          
        } catch (error) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1}`, 'error', error.message);
        }
      }
      
      return downloadedFiles;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', 'error', error.message);
      return [];
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤ (fallback)
   */
  async createDemoFiles(caseNumber) {
    this.log('üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–æ–≤', 'info', 'PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    
    const downloadedFiles = [];
    const sanitizedCaseNumber = this.sanitizeFilename(caseNumber);

    const mockDocuments = [
      {
        name: `–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –ø–æ –¥–µ–ª—É ${caseNumber}`,
        type: '–†–µ—à–µ–Ω–∏–µ'
      },
      {
        name: `–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–¥–∞ –ø–æ –¥–µ–ª—É ${caseNumber}`,
        type: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
      }
    ];

    for (let i = 0; i < mockDocuments.length; i++) {
      const doc = mockDocuments[i];
      
      try {
        this.log(`üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–∞ ${i + 1}/${mockDocuments.length}`, 'info', doc.name);
        
        const fileData = await this.createDemoFile(doc.name, caseNumber, i + 1, doc.type);
        downloadedFiles.push(fileData);
        
        this.log(`‚úÖ –î–µ–º–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω`, 'success', fileData.name);
        
      } catch (error) {
        this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Ñ–∞–π–ª–∞ ${i + 1}`, 'error', error.message);
      }
    }

    return downloadedFiles;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ñ–∞–π–ª–∞
   */
  async createDemoFile(documentName, caseNumber, index, documentType = '–î–æ–∫—É–º–µ–Ω—Ç') {
    try {
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `${this.sanitizeFilename(caseNumber)}_${timestamp}_${index}_${this.sanitizeFilename(documentName)}.pdf`;
      
      const pdfContent = this.generatePdfContent(documentName, caseNumber, index, documentType);
      const pdfBlob = new Blob([pdfContent], { type: 'application/pdf' });
      const downloadUrl = URL.createObjectURL(pdfBlob);
      
      return {
        name: filename,
        blob: pdfBlob,
        url: downloadUrl,
        size: pdfBlob.size,
        type: 'application/pdf'
      };
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Ñ–∞–π–ª–∞', 'error', error.message);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF —Ñ–∞–π–ª–∞
   */
  generatePdfContent(documentName, caseNumber, index, documentType) {
    const timestamp = new Date().toLocaleString('ru-RU');
    
    return `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
/Resources <<
  /Font <<
    /F1 5 0 R
  >>
>>
>>
endobj

4 0 obj
<<
/Length 300
>>
stream
BT
/F1 14 Tf
72 750 Td
(–ê–†–ë–ò–¢–†–ê–ñ–ù–´–ô –°–£–î) Tj
0 -30 Td
/F1 12 Tf
72 720 Td
(${documentType}) Tj
0 -25 Td
72 695 Td
(–î–µ–ª–æ: ${caseNumber}) Tj
0 -20 Td
72 675 Td
(–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ${index}) Tj
0 -20 Td
72 655 Td
(–î–∞—Ç–∞: ${timestamp}) Tj
0 -40 Td
72 615 Td
(–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) Tj
0 -20 Td
72 595 Td
(–ø–∞—Ä—Å–µ—Ä–æ–º kad.arbitr.ru) Tj
0 -40 Td
72 555 Td
(–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª) Tj
0 -20 Td
72 535 Td
(–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã) Tj
0 -20 Td
72 515 Td
(–ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤) Tj
0 -40 Td
72 475 Td
(–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: ${documentName}) Tj
ET
endstream
endobj

5 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000204 00000 n 
0000000550 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
900
%%EOF`;
  }

  /**
   * Fetch —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async fetchWithRetry(url, options, retries = this.retryCount) {
    for (let i = 0; i < retries; i++) {
      try {
        const response = await fetch(url, options);
        if (response.ok) {
          return response;
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      } catch (error) {
        if (i === retries - 1) {
          throw error;
        }
        this.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º...`, 'warning', error.message);
        await this.delay(this.timeout * (i + 1));
      }
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  saveErrorPage(html, errorMessage, step) {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `error_page_${step}_${timestamp}.html`;
      
      // –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
      const errorPageContent = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - ${step}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .error-info { background: #f8d7da; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .error-step { color: #721c24; font-weight: bold; }
        .error-message { color: #721c24; margin: 10px 0; }
        .timestamp { color: #666; font-size: 12px; }
        .original-content { border: 1px solid #ddd; padding: 10px; background: #f8f9fa; }
    </style>
</head>
<body>
    <div class="error-info">
        <div class="error-step">–≠—Ç–∞–ø: ${step}</div>
        <div class="error-message">–û—à–∏–±–∫–∞: ${errorMessage}</div>
        <div class="timestamp">–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}</div>
    </div>
    <h3>–ò—Å—Ö–æ–¥–Ω—ã–π HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</h3>
    <div class="original-content">
        <pre>${html.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
    </div>
</body>
</html>`;

      // –°–æ–∑–¥–∞–µ–º Blob –∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob([errorPageContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      
      const errorPageData = {
        filename: filename,
        url: url,
        blob: blob,
        step: step,
        errorMessage: errorMessage,
        timestamp: new Date().toLocaleString('ru-RU'),
        size: blob.size
      };
      
      this.errorPages.push(errorPageData);
      
      this.log('üíæ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'info', `–§–∞–π–ª: ${filename}, –†–∞–∑–º–µ—Ä: ${this.formatFileSize(blob.size)}`);
      
      return errorPageData;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error', error.message);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
   */
  log(message, type = 'info', details = '') {
    const timestamp = new Date().toLocaleString('ru-RU');
    const logEntry = {
      timestamp,
      message,
      type,
      details
    };
    
    console.log(`[${timestamp}] ${message}`, details ? `- ${details}` : '');
    
    if (this.logCallback) {
      this.logCallback(logEntry);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  sanitizeFilename(filename) {
    if (!filename || typeof filename !== 'string') {
      return 'unknown_file';
    }
    
    return filename
      .replace(/[<>:"/\\|?*]/g, '_')
      .replace(/\s+/g, '_')
      .substring(0, 100);
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  getDownloadedFiles() {
    return this.downloadedFiles;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏
   */
  getErrorPages() {
    return this.errorPages;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  clearFiles() {
    this.downloadedFiles.forEach(file => {
      if (file.url) {
        URL.revokeObjectURL(file.url);
      }
    });
    
    this.downloadedFiles = [];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏
   */
  clearErrorPages() {
    this.errorPages.forEach(page => {
      if (page.url) {
        URL.revokeObjectURL(page.url);
      }
    });
    
    this.errorPages = [];
    this.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—à–∏–±–∫–∞–º–∏', 'info');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ClientKadArbitrParser = ClientKadArbitrParser;