/**
 * –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ kad.arbitr.ru –¥–ª—è GitHub Pages
 */

class App {
    constructor() {
        this.parser = new KadArbitrParser();
        this.initializeElements();
        this.bindEvents();
        this.checkBrowserCompatibility();
    }

    initializeElements() {
        this.form = document.getElementById('parseForm');
        this.submitBtn = document.getElementById('submitBtn');
        this.caseInput = document.getElementById('case_number');
        this.statusPanel = document.getElementById('statusPanel');
        this.statusText = document.getElementById('statusText');
        this.currentCaseSpan = document.getElementById('currentCase');
        this.progressSpan = document.getElementById('progress');
        this.resultPanel = document.getElementById('resultPanel');
        this.resultIcon = document.getElementById('resultIcon');
        this.resultTitle = document.getElementById('resultTitle');
        this.resultMessage = document.getElementById('resultMessage');
        this.filesSection = document.getElementById('filesSection');
        this.filesList = document.getElementById('filesList');
        this.notification = document.getElementById('notification');
    }

    bindEvents() {
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
    }

    checkBrowserCompatibility() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API
        const requiredFeatures = [
            'fetch',
            'Blob',
            'URL',
            'Promise'
        ];

        const unsupportedFeatures = requiredFeatures.filter(feature => {
            if (feature === 'fetch') return !window.fetch;
            if (feature === 'Blob') return !window.Blob;
            if (feature === 'URL') return !window.URL;
            if (feature === 'Promise') return !window.Promise;
            return false;
        });

        if (unsupportedFeatures.length > 0) {
            this.showError(`–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${unsupportedFeatures.join(', ')}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä.`);
        }
    }

    async handleSubmit(e) {
        e.preventDefault();
        
        const caseNumber = this.caseInput.value.trim();
        if (!caseNumber) {
            this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞');
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
        this.submitBtn.disabled = true;
        this.submitBtn.innerHTML = '<span class="spinner"></span> –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.resultPanel.style.display = 'none';
        this.statusPanel.style.display = 'block';
        this.statusPanel.className = 'status-panel parsing';
        
        try {
            const files = await this.parser.parseCase(caseNumber, (progress) => {
                this.updateProgress(caseNumber, progress);
            });
            
            this.showSuccess(`–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`, files, caseNumber);
            this.showNotification('–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            this.showError(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`, caseNumber);
            this.showNotification('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞!', 'error');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫
            this.showErrorTips(error);
        } finally {
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
            this.submitBtn.disabled = false;
            this.submitBtn.innerHTML = 'üîç –ù–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã';
            this.statusPanel.style.display = 'none';
        }
    }

    updateProgress(caseNumber, progress) {
        this.currentCaseSpan.textContent = caseNumber;
        this.progressSpan.textContent = progress;
    }

    showSuccess(message, files, caseNumber) {
        this.resultPanel.style.display = 'block';
        this.resultPanel.className = 'result-panel success';
        
        this.resultIcon.textContent = '‚úÖ';
        this.resultTitle.textContent = '–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!';
        this.resultMessage.textContent = message;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        if (files && files.length > 0) {
            this.filesSection.style.display = 'block';
            this.filesList.innerHTML = '';
            
            files.forEach(fileName => {
                const listItem = document.createElement('li');
                listItem.className = 'file-item';
                listItem.innerHTML = `
                    <div class="file-name">üìÑ ${fileName}</div>
                    <button class="btn-download" onclick="app.downloadFile('${fileName}')">
                        ‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å
                    </button>
                `;
                this.filesList.appendChild(listItem);
            });
        } else {
            this.filesSection.style.display = 'none';
        }
    }

    showError(message, caseNumber = '') {
        this.resultPanel.style.display = 'block';
        this.resultPanel.className = 'result-panel error';
        
        this.resultIcon.textContent = '‚ùå';
        this.resultTitle.textContent = '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞';
        this.resultMessage.textContent = message;
        
        this.filesSection.style.display = 'none';
    }

    showErrorTips(error) {
        const errorMessage = error.message.toLowerCase();
        let tips = [];
        
        if (errorMessage.includes('cors') || errorMessage.includes('network')) {
            tips.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
            tips.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            tips.push('‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } else if (errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω—ã') || errorMessage.includes('not found')) {
            tips.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞');
            tips.push('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–ª–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            tips.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞');
        } else if (errorMessage.includes('timeout') || errorMessage.includes('–ø—Ä–µ–≤—ã—à–µ–Ω–æ')) {
            tips.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
            tips.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞');
            tips.push('‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω');
        } else {
            tips.push('‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            tips.push('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12)');
            tips.push('‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É');
        }
        
        if (tips.length > 0) {
            const tipsHtml = `
                <div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px; text-align: left;">
                    <strong>üí° –°–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:</strong><br>
                    ${tips.join('<br>')}
                </div>
            `;
            this.resultMessage.innerHTML += tipsHtml;
        }
    }

    downloadFile(fileName) {
        // –§–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(`–§–∞–π–ª ${fileName} —É–∂–µ —Å–∫–∞—á–∞–Ω!`, 'success');
    }

    showNotification(message, type = 'success') {
        this.notification.textContent = message;
        this.notification.className = `notification ${type}`;
        this.notification.classList.add('show');
        
        setTimeout(() => {
            this.notification.classList.remove('show');
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new App();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (navigator.userAgent.includes('Chrome')) {
        console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: Chrome');
    } else if (navigator.userAgent.includes('Firefox')) {
        console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: Firefox');
    } else if (navigator.userAgent.includes('Safari')) {
        console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: Safari');
    } else if (navigator.userAgent.includes('Edge')) {
        console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –±—Ä–∞—É–∑–µ—Ä: Edge');
    } else {
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π.');
    }
});