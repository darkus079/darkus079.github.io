/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend API –ø–∞—Ä—Å–µ—Ä–∞ kad.arbitr.ru
 * –ó–∞–º–µ–Ω—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –≤—ã–∑–æ–≤—ã –∫ backend —Å–µ—Ä–≤–∏—Å—É
 */

class BackendClient {
  constructor() {
    this.baseUrl = 'http://127.0.0.1:8000';
    this.isProcessing = false;
    this.downloadedFiles = [];
    this.progressCallback = null;
    this.logCallback = null;
    this.statusCheckInterval = null;
    this.currentCase = '';
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ backend
   */
  async parseCase(caseNumber, progressCallback, logCallback) {
    if (this.isProcessing) {
      throw new Error('–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
    }

    this.isProcessing = true;
    this.progressCallback = progressCallback;
    this.logCallback = logCallback;
    this.downloadedFiles = [];
    this.currentCase = caseNumber;

    this.log('üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê –ß–ï–†–ï–ó BACKEND', 'info', `–ù–æ–º–µ—Ä –¥–µ–ª–∞: ${caseNumber}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
      await this.checkBackendHealth();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
      this.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ backend...', 'info');
      if (progressCallback) progressCallback('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ backend...');

      const response = await fetch(`${this.baseUrl}/api/parse`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          case_number: caseNumber
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const parseResponse = await response.json();
      this.log('‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç backend', 'success', parseResponse.message);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
      this.startStatusMonitoring();

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
      const result = await this.waitForCompletion();

      this.log('‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù', 'success', `–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.files.length}`);
      return result.files;

    } catch (error) {
      this.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê', 'error', error.message);
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    } finally {
      this.isProcessing = false;
      this.stopStatusMonitoring();
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend
   */
  async checkBackendHealth() {
    try {
      this.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...', 'info');
      
      const response = await fetch(`${this.baseUrl}/api/health`, {
        method: 'GET',
        timeout: 5000
      });

      if (!response.ok) {
        throw new Error(`Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP ${response.status}`);
      }

      const health = await response.json();
      this.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω', 'success', `–°—Ç–∞—Ç—É—Å: ${health.status}`);
      
      return health;
    } catch (error) {
      this.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error', error.message);
      throw new Error(`Backend —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${this.baseUrl}`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  startStatusMonitoring() {
    this.log('üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞...', 'info');
    
    this.statusCheckInterval = setInterval(async () => {
      try {
        await this.checkStatus();
      } catch (error) {
        this.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'warning', error.message);
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞
   */
  stopStatusMonitoring() {
    if (this.statusCheckInterval) {
      clearInterval(this.statusCheckInterval);
      this.statusCheckInterval = null;
      this.log('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async checkStatus() {
    try {
      const response = await fetch(`${this.baseUrl}/api/status`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const status = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (this.progressCallback && status.progress) {
        this.progressCallback(status.progress);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (status.is_parsing && status.current_case === this.currentCase) {
        this.log('üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞', 'info', status.progress);
      }

      return status;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error', error.message);
      throw error;
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async waitForCompletion() {
    const maxWaitTime = 300000; // 5 –º–∏–Ω—É—Ç
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWaitTime) {
      try {
        const status = await this.checkStatus();
        
        if (!status.is_parsing) {
          // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
          const files = await this.getFilesList();
          
          return {
            success: status.files_count > 0,
            files: files,
            message: status.progress
          };
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await this.delay(2000);
        
      } catch (error) {
        this.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', 'warning', error.message);
        await this.delay(5000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      }
    }
    
    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  async getFilesList() {
    try {
      const response = await fetch(`${this.baseUrl}/api/files`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π frontend
      const files = data.files.map(file => ({
        name: file.name,
        size: file.size,
        url: `${this.baseUrl}/api/download/${encodeURIComponent(file.name)}`,
        created: file.created,
        modified: file.modified
      }));

      this.log('üìÅ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤', 'success', `–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
      
      return files;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤', 'error', error.message);
      return [];
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
   */
  async downloadFile(filename, url) {
    try {
      this.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞', 'info', filename);
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const blob = await response.blob();
      const downloadUrl = URL.createObjectURL(blob);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = filename;
      link.style.display = 'none';
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
      setTimeout(() => URL.revokeObjectURL(downloadUrl), 1000);
      
      this.log('‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω', 'success', filename);
      
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞', 'error', `${filename}: ${error.message}`);
      throw error;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   */
  async clearFiles() {
    try {
      this.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...', 'info');
      
      const response = await fetch(`${this.baseUrl}/api/clear`, {
        method: 'POST'
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      this.log('‚úÖ –§–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã', 'success', result.message);
      
      return result;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤', 'error', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async getHistory() {
    try {
      const response = await fetch(`${this.baseUrl}/api/history`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      return data.history;
    } catch (error) {
      this.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏', 'error', error.message);
      return [];
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
   */
  log(message, type = 'info', details = '') {
    const timestamp = new Date().toLocaleString('ru-RU');
    const logEntry = {
      timestamp,
      message,
      type,
      details
    };
    
    console.log(`[${timestamp}] ${message}`, details ? `- ${details}` : '');
    
    if (this.logCallback) {
      this.logCallback(logEntry);
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  getDownloadedFiles() {
    return this.downloadedFiles;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
   */
  clearFiles() {
    this.downloadedFiles = [];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  getErrorPages() {
    return [];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  clearErrorPages() {
    this.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—à–∏–±–∫–∞–º–∏ (–Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ –¥–ª—è backend)', 'info');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.BackendClient = BackendClient;
