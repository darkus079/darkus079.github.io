const express = require('express');
const path = require('path');
const fs = require('fs-extra');
const cors = require('cors');
const http = require('http');
const socketIo = require('socket.io');
const KadArbitrParser = require('./src/parser/KadArbitrParser');
const fetch = global.fetch || require('node-fetch');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;
const FILES_DIR = path.join(__dirname, 'files');
const CONFIG_PATH = path.join(__dirname, 'public', 'backend.config.json');
let BACKEND_BASE_URL = process.env.BACKEND_BASE_URL || 'http://91.224.87.134:8000';

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend
try {
  if (fs.existsSync(CONFIG_PATH)) {
    const cfg = fs.readJsonSync(CONFIG_PATH);
    if (!process.env.BACKEND_BASE_URL && cfg && typeof cfg.backendBaseUrl === 'string' && cfg.backendBaseUrl.trim()) {
      BACKEND_BASE_URL = cfg.backendBaseUrl.trim().replace(/\/$/, '');
    }
  }
  console.log(`‚öôÔ∏è  BACKEND_BASE_URL: ${BACKEND_BASE_URL}`);
} catch (e) {
  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å backend.config.json, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç:', e.message);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let parser = null;
let isProcessing = false;
let currentCase = '';
let progress = '';

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));
app.use('/files', express.static(FILES_DIR));

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
fs.ensureDirSync(FILES_DIR);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
async function initializeParser() {
  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...');
    parser = new KadArbitrParser();
    console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ files
async function cleanupFiles() {
  try {
    await fs.emptyDir(FILES_DIR);
    console.log('‚úÖ –ü–∞–ø–∫–∞ files –æ—á–∏—â–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ files:', error);
  }
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/files', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'files.html'));
});

app.get('/diagnostics', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'diagnostics.html'));
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.post('/api/parse', async (req, res) => {
  const { case_number } = req.body;
  
  if (isProcessing) {
    return res.status(429).json({
      success: false,
      message: '–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
    });
  }
  
  if (!case_number || !case_number.trim()) {
    return res.status(400).json({
      success: false,
      message: '–ù–æ–º–µ—Ä –¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
    });
  }
  
  isProcessing = true;
  currentCase = case_number.trim();
  progress = '–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...';
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
  io.emit('parsing_started', { case_number: currentCase, progress });
  
  try {
    // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É files
    await cleanupFiles();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const downloadedFiles = await parser.parseCase(case_number.trim(), (status) => {
      progress = status;
      io.emit('parsing_progress', { case_number: currentCase, progress });
    });
    
    progress = `–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`;
    
    const result = {
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ ${downloadedFiles.length} —Ñ–∞–π–ª–æ–≤`,
      files: downloadedFiles,
      case_number: currentCase
    };
    
    io.emit('parsing_completed', result);
    res.json(result);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
    progress = `–û—à–∏–±–∫–∞: ${error.message}`;
    
    const result = {
      success: false,
      message: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`,
      files: [],
      case_number: currentCase
    };
    
    io.emit('parsing_error', result);
    res.status(500).json(result);
    
  } finally {
    isProcessing = false;
    currentCase = '';
    progress = '';
  }
});

app.get('/api/status', (req, res) => {
  res.json({
    is_parsing: isProcessing,
    current_case: currentCase,
    progress: progress
  });
});

app.get('/api/files', async (req, res) => {
  try {
    const files = await fs.readdir(FILES_DIR);
    const pdfFiles = files.filter(file => file.toLowerCase().endsWith('.pdf'));
    res.json({ files: pdfFiles });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
    res.json({ files: [] });
  }
});

app.get('/api/download/:filename', (req, res) => {
  const filename = decodeURIComponent(req.params.filename);
  const filePath = path.join(FILES_DIR, filename);
  
  console.log(`üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filename}`);
  console.log(`üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${filePath}`);
  
  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return res.status(404).json({ message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${filename}`);
  res.download(filePath, filename);
});

app.get('/api/file-info/:filename', (req, res) => {
  const filename = decodeURIComponent(req.params.filename);
  const filePath = path.join(FILES_DIR, filename);
  
  if (!fs.existsSync(filePath)) {
    return res.status(404).json({ message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const stats = fs.statSync(filePath);
  res.json({
    name: filename,
    size: stats.size,
    created: stats.birthtime.toISOString(),
    modified: stats.mtime.toISOString()
  });
});

app.post('/api/clear', async (req, res) => {
  if (isProcessing) {
    return res.status(429).json({
      success: false,
      message: '–ù–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞'
    });
  }
  
  try {
    await cleanupFiles();
    res.json({ success: true, message: '–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤' });
  }
});

app.get('/api/doc-links', async (req, res) => {
  const caseNumber = req.query.case;
  if (!caseNumber) {
    return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –¥–µ–ª–∞' });
  }
  try {
    const backendResponse = await fetch(`${BACKEND_BASE_URL}/api/doc-links?case=${encodeURIComponent(caseNumber)}`);
    const data = await backendResponse.json();
    res.json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ —Å –±—ç–∫–µ–Ω–¥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫' });
  }
});

app.get('/api/cases', async (req, res) => {
  try {
    const backendResponse = await fetch(`${BACKEND_BASE_URL}/api/cases`);
    const data = await backendResponse.json();
    res.json(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª —Å –±—ç–∫–µ–Ω–¥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª' });
  }
});

app.post('/api/test-browser', async (req, res) => {
  try {
    const testParser = new KadArbitrParser();
    const browserAvailable = await testParser.initBrowser();
    
    if (browserAvailable) {
      await testParser.closeBrowser();
      res.json({
        available: true,
        puppeteerVersion: require('puppeteer/package.json').version
      });
    } else {
      res.json({
        available: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä'
      });
    }
  } catch (error) {
    res.json({
      available: false,
      error: error.message
    });
  }
});

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
  console.log('üë§ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  socket.emit('status_update', {
    is_parsing: isProcessing,
    current_case: currentCase,
    progress: progress
  });
  
  socket.on('disconnect', () => {
    console.log('üë§ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    await initializeParser();
    
    server.listen(PORT, () => {
      console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.log(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:${PORT}`);
      console.log(`‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();
