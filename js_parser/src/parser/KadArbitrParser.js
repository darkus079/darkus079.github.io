const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

class KadArbitrParser {
  constructor() {
    this.browser = null;
    this.page = null;
    this.filesDir = path.join(__dirname, '../../files');
    this.downloadsDir = this.getDownloadsDirectory();
    this.isProcessing = false;
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    fs.ensureDirSync(this.filesDir);
    
    console.log(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${this.downloadsDir}`);
    console.log(`üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${path.resolve(this.filesDir)}`);
  }
  
  getDownloadsDirectory() {
    try {
      const homeDir = require('os').homedir();
      const downloadsPath = path.join(homeDir, 'Downloads');
      
      if (fs.existsSync(downloadsPath)) {
        return downloadsPath;
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è Windows
      const windowsDownloads = path.join(homeDir, '–ó–∞–≥—Ä—É–∑–∫–∏');
      if (fs.existsSync(windowsDownloads)) {
        return windowsDownloads;
      }
      
      console.warn('‚ö†Ô∏è –ü–∞–ø–∫–∞ –ó–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É');
      return process.cwd();
      
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ó–∞–≥—Ä—É–∑–∫–∞–º:', error);
      return process.cwd();
    }
  }
  
  async initBrowser() {
    try {
      console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å puppeteer
      if (!puppeteer || !puppeteer.launch) {
        console.warn('‚ö†Ô∏è Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API');
        return false;
      }
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
      const launchOptions = {
        headless: 'new',
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--window-size=1920,1080'
        ],
        defaultViewport: {
          width: 1920,
          height: 1080
        }
      };
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Chrome –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      const possibleChromePaths = [
        'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Users\\' + require('os').userInfo().username + '\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe',
        'C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe',
        'C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe'
      ];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chrome
      for (const chromePath of possibleChromePaths) {
        if (fs.existsSync(chromePath)) {
          launchOptions.executablePath = chromePath;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±—Ä–∞—É–∑–µ—Ä: ${chromePath}`);
          break;
        }
      }
      
      this.browser = await puppeteer.launch(launchOptions);
      
      this.page = await this.browser.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ User-Agent –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      await this.page._client.send('Page.setDownloadBehavior', {
        behavior: 'allow',
        downloadPath: this.downloadsDir
      });
      
      // –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      await this.page.evaluateOnNewDocument(() => {
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined,
        });
        
        // –£–¥–∞–ª—è–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        delete navigator.__proto__.webdriver;
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º Chrome runtime
        window.chrome = {
          runtime: {},
          loadTimes: function() {},
          csi: function() {},
          app: {}
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        Object.defineProperty(navigator, 'languages', {
          get: () => ['ru-RU', 'ru', 'en-US', 'en']
        });
      });
      
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error);
      console.warn('‚ö†Ô∏è Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch API');
      return false;
    }
  }
  
  async closeBrowser() {
    try {
      if (this.browser) {
        await this.browser.close();
        this.browser = null;
        this.page = null;
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error);
    }
  }
  
  async humanDelay(min, max, description = '') {
    const delay = Math.floor(Math.random() * (max - min + 1)) + min;
    console.log(`‚è≥ ${description} (${delay}—Å)`);
    await new Promise(resolve => setTimeout(resolve, delay * 1000));
  }
  
  async simulateHumanBehavior() {
    // –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    const viewport = this.page.viewport();
    const x = Math.random() * viewport.width;
    const y = Math.random() * viewport.height;
    
    await this.page.mouse.move(x, y, { steps: 10 });
    await this.humanDelay(0.5, 1.5);
  }
  
  async searchCase(caseNumber, progressCallback) {
    try {
      console.log(`üéØ –ü–æ–∏—Å–∫ –¥–µ–ª–∞: ${caseNumber}`);
      
      if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç kad.arbitr.ru...');
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
      await this.page.goto('https://kad.arbitr.ru/', { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });
      
      await this.humanDelay(2, 4, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞...');
      
      // –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
      await this.page.waitForSelector('input[type="text"]', { timeout: 10000 });
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –¥–µ–ª–∞
      await this.page.click('input[type="text"]');
      await this.page.keyboard.down('Control');
      await this.page.keyboard.press('KeyA');
      await this.page.keyboard.up('Control');
      await this.page.type('input[type="text"]', caseNumber);
      
      await this.humanDelay(1, 2, '–≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞');
      
      if (progressCallback) progressCallback('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞...');
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
      await this.page.click('button[type="submit"]');
      
      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      await this.page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 15000 });
      
      if (progressCallback) progressCallback('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...');
      
      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–µ–ª–∞
      const caseLinks = await this.page.evaluate(() => {
        const links = [];
        const elements = document.querySelectorAll('a[href*="/card/"]');
        
        elements.forEach(element => {
          const href = element.getAttribute('href');
          const text = element.textContent.trim();
          if (href && text) {
            links.push({
              url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
              text: text
            });
          }
        });
        
        return links;
      });
      
      if (caseLinks.length === 0) {
        throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª: ${caseLinks.length}`);
      return caseLinks;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞:', error);
      throw error;
    }
  }
  
  async downloadPdfFiles(caseUrl, caseNumber, progressCallback) {
    try {
      console.log(`üìÅ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É: ${caseUrl}`);
      
      if (progressCallback) progressCallback('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É...');
      
      await this.page.goto(caseUrl, { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });
      
      await this.humanDelay(2, 3, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ª–∞');
      
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –≤–∫–ª–∞–¥–∫–∏ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"...');
      
      // –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"
      try {
        await this.page.waitForSelector('div.b-case-chrono-button-text', { timeout: 10000 });
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"
        const electronicTab = await this.page.evaluateHandle(() => {
          const buttons = Array.from(document.querySelectorAll('div.b-case-chrono-button-text'));
          return buttons.find(btn => btn.textContent.includes('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ'));
        });
        
        if (electronicTab) {
          await electronicTab.click();
          console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ"');
        } else {
          throw new Error('–í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
      } catch (error) {
        console.warn('‚ùå –í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', error);
        throw new Error('–í–∫–ª–∞–¥–∫–∞ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
      
      await this.humanDelay(2, 3, '–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
      
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
      
      // –ò—â–µ–º PDF —Å—Å—ã–ª–∫–∏
      const pdfLinks = await this.page.evaluate(() => {
        const links = [];
        const elements = document.querySelectorAll('a[href*=".pdf"], a[href*="document"]');
        
        elements.forEach(element => {
          const href = element.getAttribute('href');
          const text = element.textContent.trim();
          if (href && text) {
            links.push({
              url: href.startsWith('http') ? href : `https://kad.arbitr.ru${href}`,
              text: text
            });
          }
        });
        
        return links;
      });
      
      if (pdfLinks.length === 0) {
        throw new Error('PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${pdfLinks.length}`);
      
      if (progressCallback) progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${pdfLinks.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...`);
      
      const downloadedFiles = [];
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π PDF —Ñ–∞–π–ª
      for (let i = 0; i < pdfLinks.length; i++) {
        const link = pdfLinks[i];
        
        try {
          if (progressCallback) {
            progressCallback(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1} –∏–∑ ${pdfLinks.length}...`);
          }
          
          console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${link.text}`);
          
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          const timestamp = new Date().toISOString().split('T')[0];
          const filename = `${caseNumber}_${timestamp}_${i + 1}_${this.sanitizeFilename(link.text)}.pdf`;
          const filePath = path.join(this.filesDir, filename);
          
          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
          const response = await this.page.goto(link.url, { 
            waitUntil: 'networkidle2',
            timeout: 30000 
          });
          
          if (response && response.ok()) {
            const buffer = await response.buffer();
            await fs.writeFile(filePath, buffer);
            downloadedFiles.push(filename);
            console.log(`‚úÖ –°–∫–∞—á–∞–Ω: ${filename}`);
          } else {
            console.warn(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${link.text}`);
          }
          
          await this.humanDelay(1, 2, '–ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏');
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${link.text}:`, error);
        }
      }
      
      console.log(`‚úÖ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
      return downloadedFiles;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤:', error);
      throw error;
    }
  }
  
  sanitizeFilename(filename) {
    return filename
      .replace(/[<>:"/\\|?*]/g, '_')
      .replace(/\s+/g, '_')
      .substring(0, 100);
  }
  
  async parseCase(caseNumber, progressCallback) {
    if (this.isProcessing) {
      throw new Error('–ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
    }
    
    this.isProcessing = true;
    console.log(`üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê: ${caseNumber}`);
    
    try {
      // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É files
      await fs.emptyDir(this.filesDir);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
      if (progressCallback) progressCallback('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
      const browserAvailable = await this.initBrowser();
      
      if (!browserAvailable) {
        console.warn('‚ö†Ô∏è –ë—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥');
        try {
          return await this.parseCaseFallback(caseNumber, progressCallback);
        } catch (fallbackError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ fallback —Ä–µ–∂–∏–º–µ:', fallbackError);
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥: ${fallbackError.message}`);
        }
      }
      
      // –ò—â–µ–º –¥–µ–ª–æ
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –¥–µ–ª–∞...');
      const caseLinks = await this.searchCase(caseNumber, progressCallback);
      
      if (caseLinks.length === 0) {
        throw new Error('–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞
      const caseUrl = caseLinks[0].url;
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–∞: ${caseLinks[0].text}`);
      
      const downloadedFiles = await this.downloadPdfFiles(caseUrl, caseNumber, progressCallback);
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${downloadedFiles.length}`);
      return downloadedFiles;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      await this.closeBrowser();
      this.isProcessing = false;
    }
  }
  
  async parseCaseFallback(caseNumber, progressCallback) {
    try {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞');
      
      if (progressCallback) progressCallback('–ü–æ–∏—Å–∫ –¥–µ–ª–∞ —á–µ—Ä–µ–∑ API...');
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const sanitizedCaseNumber = this.sanitizeFilename(caseNumber);
      
      // –ü—Ä–æ—Å—Ç–æ–π fallback - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      const mockFiles = [
        `${sanitizedCaseNumber}_mock_document_1.pdf`,
        `${sanitizedCaseNumber}_mock_document_2.pdf`
      ];
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ files —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      await fs.ensureDir(this.filesDir);
      
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      for (let i = 0; i < mockFiles.length; i++) {
        const filePath = path.join(this.filesDir, mockFiles[i]);
        const mockContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
72 720 Td
(–ú–æ–∫-–¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –¥–µ–ª–∞ ${caseNumber}) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000204 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
297
%%EOF`;
        
        try {
          await fs.writeFile(filePath, mockContent);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–∫-—Ñ–∞–π–ª: ${mockFiles[i]}`);
        } catch (writeError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ${mockFiles[i]}:`, writeError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        }
      }
      
      if (progressCallback) progressCallback(`–°–æ–∑–¥–∞–Ω–æ ${mockFiles.length} –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤`);
      
      console.log(`‚úÖ Fallback –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${mockFiles.length}`);
      return mockFiles;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ fallback –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
      throw error;
    }
  }
  
  async getDownloadedFiles() {
    try {
      const files = await fs.readdir(this.filesDir);
      return files.filter(file => file.toLowerCase().endsWith('.pdf'));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
      return [];
    }
  }
  
  async cleanupFilesDirectory() {
    try {
      await fs.emptyDir(this.filesDir);
      console.log('‚úÖ –ü–∞–ø–∫–∞ files –æ—á–∏—â–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ files:', error);
    }
  }
}

module.exports = KadArbitrParser;
