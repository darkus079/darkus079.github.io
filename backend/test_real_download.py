#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import os
import time
import subprocess
import requests
import threading
from pathlib import Path

def start_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    process = subprocess.Popen(
        ["python", "app.py"],
        cwd=os.path.dirname(os.path.abspath(__file__)),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    return process

def wait_for_server(max_wait=30):
    """–ñ–¥–µ—Ç –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(max_wait):
        try:
            response = requests.get("http://localhost:8000/", timeout=2)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                return True
        except:
            pass
        time.sleep(1)
        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_wait}...")
    
    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
    return False

def test_download_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    try:
        response = requests.get("http://localhost:8000/api/files")
        print(f"üìä –°—Ç–∞—Ç—É—Å /api/files: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìÅ –§–∞–π–ª—ã: {data}")
            
            if 'files' in data and len(data['files']) > 0:
                filename = data['files'][0]
                print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
                
                # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                import urllib.parse
                encoded_filename = urllib.parse.quote(filename)
                download_url = f"http://localhost:8000/api/download/{encoded_filename}"
                
                print(f"üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
                
                response = requests.get(download_url)
                print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
                    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                    return False
            else:
                print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_parsing_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    test_filename = "test_parsing_result.pdf"
    test_file_path = os.path.join("files", test_filename)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("files", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(test_file_path, "w", encoding="utf-8") as f:
        f.write("Test PDF content for parsing test")
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    try:
        response = requests.get("http://localhost:8000/api/files")
        if response.status_code == 200:
            data = response.json()
            print(f"üìÅ –§–∞–π–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ: {data}")
            
            if test_filename in data.get('files', []):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                import urllib.parse
                encoded_filename = urllib.parse.quote(test_filename)
                download_url = f"http://localhost:8000/api/download/{encoded_filename}"
                
                response = requests.get(download_url)
                print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                    return False
            else:
                print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_file_path):
            os.remove(test_file_path)
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_process = start_server()
    
    try:
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if not wait_for_server():
            return False
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        success1 = test_download_flow()
        
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        success2 = test_parsing_flow()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
        print(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {'–ü–†–û–ô–î–ï–ù' if success1 else '–ü–†–û–í–ê–õ–ï–ù'}")
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {'–ü–†–û–ô–î–ï–ù' if success2 else '–ü–†–û–í–ê–õ–ï–ù'}")
        
        if success1 and success2:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        
        return success1 and success2
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        server_process.terminate()
        try:
            server_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            server_process.kill()
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
