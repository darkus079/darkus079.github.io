"""
–ù–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤
–û—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ first.py, second.py, third.py –∏ complex.py
"""

import os
import time
import logging
import requests
import json
import re
from io import BytesIO
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.common.exceptions import TimeoutException, NoSuchElementException

logger = logging.getLogger(__name__)

# –ß–ï–†–ù–´–ô –°–ü–ò–°–û–ö URL - –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –Ω—É–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å
PDF_URL_BLACKLIST = [
    'Content/–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.pdf',
    '/Content/–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.pdf',
    'https://kad.arbitr.ru/Content/–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.pdf',
    'privacy',
    'policy',
    'terms',
    'agreement',
    'cookie',
    'help',
    'manual',
    'instruction'
]

class PDFExtractionAlgorithms:
    """–ö–ª–∞—Å—Å —Å –Ω–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF"""
    
    def __init__(self, driver, files_dir, downloads_dir=None):
        self.driver = driver
        self.files_dir = files_dir
        self.downloads_dir = downloads_dir
        os.makedirs(files_dir, exist_ok=True)
    
    def _is_blacklisted_url(self, url):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        
        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
        """
        if not url:
            return True
        
        url_lower = url.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        for blacklisted in PDF_URL_BLACKLIST:
            if blacklisted.lower() in url_lower:
                logger.warning(f"üö´ URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {url}")
                return True
        
        return False
    
    def _is_case_document_url(self, url):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞ (–∞ –Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º)
        
        Args:
            url: URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–ª–∞
        """
        if not url:
            return False
        
        url_lower = url.lower()
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–µ–ª–∞
        case_indicators = [
            'document/pdf',
            'kad/pdfdocument',
            'pdfdocument',
            'document/getpdf',
            'getpdf',
            '/card/',
            'caseid',
            'documentid'
        ]
        
        for indicator in case_indicators:
            if indicator in url_lower:
                logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–µ–ª–∞: {url}")
                return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –Ω–æ –µ—Å—Ç—å GUID-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        import re
        guid_pattern = r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
        if re.search(guid_pattern, url_lower, re.IGNORECASE):
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å GUID: {url}")
            return True
        
        logger.debug(f"‚ö†Ô∏è –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–ª–∞: {url}")
        return False
    
    def find_pdf_url_direct(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 1: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ URL PDF —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –ò–°–ü–†–ê–í–õ–ï–ù: –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫—É kad.arbitr.ru —Å POST –∑–∞–ø—Ä–æ—Å–∞–º–∏
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 1: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ URL PDF —Ñ–∞–π–ª–∞")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if '/Document/Pdf/' in page_url and page_url.endswith('.pdf'):
                logger.info("‚úÖ –¢–µ–∫—É—â–∏–π URL —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
                return self._download_pdf_via_post(page_url, "current_url", "ALGORITHM_1")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Referer': 'https://kad.arbitr.ru/'
            }
            
            response = requests.get(page_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            logger.info(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–∞–∑–º–µ—Ä: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è kad.arbitr.ru
            pdf_patterns = [
                # –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF —Å GUID
                r'href=["\']([^"\']*Document/Pdf/[0-9a-f-]+/[0-9a-f-]+/[^"\']*\.pdf[^"\']*)["\']',
                r'src=["\']([^"\']*Document/Pdf/[0-9a-f-]+/[0-9a-f-]+/[^"\']*\.pdf[^"\']*)["\']',
                
                # JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å PDF URL
                r'var\s+\w*[Pp]df\w*[Uu]rl\s*=\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'let\s+\w*[Pp]df\w*[Uu]rl\s*=\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'const\s+\w*[Pp]df\w*[Uu]rl\s*=\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                
                # JSON –¥–∞–Ω–Ω—ã–µ
                r'"pdfUrl":\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'"documentUrl":\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'"url":\s*["\']([^"\']*Document/Pdf[^"\']*)["\']',
                
                # onclick —Å–æ–±—ã—Ç–∏—è
                r'onclick=["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'onclick=["\']([^"\']*window\.open\(["\']([^"\']*Document/Pdf[^"\']*)["\']',
                
                # data –∞—Ç—Ä–∏–±—É—Ç—ã
                r'data-pdf-url=["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'data-document-url=["\']([^"\']*Document/Pdf[^"\']*)["\']',
                r'data-url=["\']([^"\']*Document/Pdf[^"\']*)["\']'
            ]
            
            found_urls = []
            
            for i, pattern in enumerate(pdf_patterns):
                try:
                    matches = re.findall(pattern, response.text, re.IGNORECASE)
                    if matches:
                        logger.info(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω {i+1} –Ω–∞—à–µ–ª {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
                        for match in matches:
                            if isinstance(match, tuple):
                                match = match[0] if match[0] else match[1]
                            
                            # –û—á–∏—â–∞–µ–º URL
                            url = match.strip()
                            if url and len(url) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ URL
                                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
                                url = url.replace('"', '').replace("'", '').replace(')', '').replace('(', '')
                                found_urls.append(url)
                                logger.info(f"üìé –ù–∞–π–¥–µ–Ω URL: {url}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ {i+1}: {e}")
                    continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ URL
            if found_urls:
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                unique_urls = list(set(found_urls))
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_urls)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö PDF URL")
                
                downloaded_files = []
                for i, pdf_url in enumerate(unique_urls):
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                        if not pdf_url.startswith('http'):
                            if pdf_url.startswith('/'):
                                base_url = '/'.join(page_url.split('/')[:3])
                                pdf_url = base_url + pdf_url
                            else:
                                pdf_url = page_url.rstrip('/') + '/' + pdf_url
                        
                        # –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê
                        if self._is_blacklisted_url(pdf_url):
                            logger.warning(f"üö´ URL {i+1} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {pdf_url}")
                            continue
                        
                        # –ü–†–û–í–ï–†–ö–ê: –î–æ–∫—É–º–µ–Ω—Ç –¥–µ–ª–∞ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                        if not self._is_case_document_url(pdf_url):
                            logger.warning(f"‚ö†Ô∏è URL {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {pdf_url}")
                            continue
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º PDF —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
                        files = self._download_pdf_via_post(pdf_url, f"pattern_{i+1}", "ALGORITHM_1")
                        if files:
                            downloaded_files.extend(files)
                            logger.info(f"‚úÖ URL {i+1} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.warning(f"‚ö†Ô∏è URL {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å")
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {i+1}: {e}")
                        continue
                
                return downloaded_files
            else:
                logger.warning("‚ö†Ô∏è PDF URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 1: {e}")
            return []
    
    def extract_pdf_via_selenium(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —á–µ—Ä–µ–∑ Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        –ò–°–ü–†–ê–í–õ–ï–ù: –£—á–∏—Ç—ã–≤–∞–µ—Ç Chrome PDF Viewer –∏ Shadow DOM kad.arbitr.ru
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —á–µ—Ä–µ–∑ Selenium")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π driver –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Shadow DOM
            time.sleep(1.5)
            
            downloaded_files = []
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JavaScript –≤ Shadow DOM (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è kad.arbitr.ru)
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ PDF —á–µ—Ä–µ–∑ JavaScript –≤ Shadow DOM")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ PDF –≤ Shadow DOM
                js_script = """
                function findPdfInShadowDOM() {
                    console.log('–ü–æ–∏—Å–∫ PDF –≤ Shadow DOM kad.arbitr.ru...');
                    
                    // –ò—â–µ–º template —Å shadowrootmode="closed"
                    const templates = document.querySelectorAll('template[shadowrootmode="closed"]');
                    console.log('–ù–∞–π–¥–µ–Ω–æ template —Å shadowrootmode:', templates.length);
                    
                    for (let i = 0; i < templates.length; i++) {
                        const template = templates[i];
                        console.log('Template', i, ':', template.innerHTML.substring(0, 200));
                        
                        // –ò—â–µ–º iframe –≤ template
                        const iframe = template.querySelector('iframe[type="application/pdf"]');
                        if (iframe) {
                            const src = iframe.getAttribute('src');
                            console.log('–ù–∞–π–¥–µ–Ω PDF iframe –≤ template:', src);
                            
                            if (src && src !== 'about:blank') {
                                return src;
                            }
                        }
                    }
                    
                    // –ò—â–µ–º embed —ç–ª–µ–º–µ–Ω—Ç—ã
                    const embeds = document.querySelectorAll('embed[type="application/pdf"], embed[type="application/x-google-chrome-pdf"]');
                    console.log('–ù–∞–π–¥–µ–Ω–æ embed —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', embeds.length);
                    
                    for (let i = 0; i < embeds.length; i++) {
                        const embed = embeds[i];
                        const src = embed.getAttribute('src');
                        const originalUrl = embed.getAttribute('original-url');
                        
                        console.log('Embed', i, 'src:', src, 'original-url:', originalUrl);
                        
                        if (originalUrl) {
                            return originalUrl;
                        } else if (src && src !== 'about:blank') {
                            return src;
                        }
                    }
                    
                    // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º iframe
                    const iframes = document.querySelectorAll('iframe');
                    console.log('–ù–∞–π–¥–µ–Ω–æ iframe:', iframes.length);
                    
                    for (let i = 0; i < iframes.length; i++) {
                        const iframe = iframes[i];
                        const src = iframe.get_attribute('src');
                        const type = iframe.getAttribute('type');
                        
                        console.log('iframe', i, 'src:', src, 'type:', type);
                        
                        if (src && src !== 'about:blank' && 
                            (type === 'application/pdf' || src.includes('pdf') || src.includes('Document'))) {
                            return src;
                        }
                    }
                    
                    return null;
                }
                
                return findPdfInShadowDOM();
                """
                
                pdf_url = self.driver.execute_script(js_script)
                
                if pdf_url:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω PDF URL —á–µ—Ä–µ–∑ JavaScript: {pdf_url}")
                    files = self._download_pdf_via_post(pdf_url, "selenium_js", "ALGORITHM_2")
                    if files:
                        downloaded_files.extend(files)
                else:
                    logger.warning("‚ö†Ô∏è PDF URL –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ JavaScript")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ JavaScript: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ #save
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ #save")
                
                save_button = self.driver.find_element(By.CSS_SELECTOR, "#save")
                if save_button and save_button.is_displayed():
                    logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ #save")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—ç—Ç–æ –∏ –µ—Å—Ç—å PDF URL)
                    current_url = self.driver.current_url
                    if '/Document/Pdf/' in current_url:
                        logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π URL —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {current_url}")
                        files = self._download_pdf_via_post(current_url, "save_button", "ALGORITHM_2")
                        if files:
                            downloaded_files.extend(files)
                else:
                    logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ #save –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –≤–∏–¥–Ω–∞")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ #save: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ iframe
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ PDF —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ iframe")
                
                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(iframes)} iframe —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                for i, iframe in enumerate(iframes):
                    try:
                        src = iframe.get_attribute('src')
                        iframe_type = iframe.get_attribute('type')
                        logger.info(f"üîç iframe {i+1}: src={src}, type={iframe_type}")
                        
                        if src and src != 'about:blank':
                            if iframe_type == 'application/pdf' or 'pdf' in src.lower() or 'Document' in src:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω PDF iframe: {src}")
                                files = self._download_pdf_via_post(src, f"iframe_{i+1}", "ALGORITHM_2")
                                if files:
                                    downloaded_files.extend(files)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ iframe {i+1}: {e}")
                        continue
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ iframe: {e}")
            
            # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF")
                
                download_selectors = [
                    "button[onclick*='pdf']",
                    "a[href*='pdf']",
                    "button[onclick*='Document']",
                    "a[href*='Document']",
                    ".download-pdf",
                    "#download-pdf",
                    "button[title*='—Å–∫–∞—á–∞—Ç—å']",
                    "a[title*='—Å–∫–∞—á–∞—Ç—å']",
                    "button[title*='–°–∫–∞—á–∞—Ç—å']",
                    "a[title*='–°–∫–∞—á–∞—Ç—å']"
                ]
                
                for selector in download_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in elements:
                            try:
                                href = element.get_attribute('href')
                                onclick = element.get_attribute('onclick')
                                
                                if href and 'pdf' in href.lower():
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF: {href}")
                                    files = self._download_pdf_via_post(href, "download_link", "ALGORITHM_2")
                                    if files:
                                        downloaded_files.extend(files)
                                        
                                elif onclick and ('pdf' in onclick.lower() or 'Document' in onclick):
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ PDF: {onclick}")
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ onclick
                                    url_match = re.search(r'["\']([^"\']*Document/Pdf[^"\']*)["\']', onclick)
                                    if url_match:
                                        pdf_url = url_match.group(1)
                                        files = self._download_pdf_via_post(pdf_url, "download_button", "ALGORITHM_2")
                                        if files:
                                            downloaded_files.extend(files)
                            except Exception as e:
                                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                                continue
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                        continue
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            
            return downloaded_files
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 2: {e}")
            return []
    
    def find_pdf_in_network_requests(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        –ò–°–ü–†–ê–í–õ–ï–ù: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Chrome DevTools Protocol –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PDF
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ CDP
            logger.info("üîÑ –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ CDP...")
            
            try:
                # –í–∫–ª—é—á–∞–µ–º Network domain
                self.driver.execute_cdp_cmd('Network.enable', {})
                logger.info("‚úÖ Network domain –≤–∫–ª—é—á–µ–Ω")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å CDP –ø–µ—Ä–µ—Ö–≤–∞—Ç: {e}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–µ—Ä–µ—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ JavaScript
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–≤–∞—Ç —á–µ—Ä–µ–∑ JavaScript...")
            
            js_script = """
            const originalFetch = window.fetch;
            const interceptedRequests = [];
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã
            window.fetch = function(...args) {
                const url = args[0];
                const options = args[1] || {};
                
                console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω fetch –∑–∞–ø—Ä–æ—Å:', url, options);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ PDF
                if (url.includes('Document/Pdf') || url.includes('.pdf')) {
                    interceptedRequests.push({
                        url: url,
                        method: options.method || 'GET',
                        headers: options.headers || {},
                        body: options.body
                    });
                }
                
                return originalFetch.apply(this, args);
            };
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest
            const originalXHR = window.XMLHttpRequest;
            window.XMLHttpRequest = function() {
                const xhr = new originalXHR();
                const originalOpen = xhr.open;
                const originalSend = xhr.send;
                
                xhr.open = function(method, url, ...args) {
                    console.log('–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω XHR –∑–∞–ø—Ä–æ—Å:', method, url);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ PDF
                    if (url.includes('Document/Pdf') || url.includes('.pdf')) {
                        interceptedRequests.push({
                            url: url,
                            method: method,
                            headers: {},
                            body: null
                        });
                    }
                    
                    return originalOpen.apply(this, [method, url, ...args]);
                };
                
                xhr.send = function(data) {
                    console.log('XHR –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', data);
                    return originalSend.apply(this, [data]);
                };
                
                return xhr;
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            window.interceptedRequests = interceptedRequests;
            
            return interceptedRequests.length;
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
            initial_count = self.driver.execute_script(js_script)
            logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {initial_count}")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (PDF –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ PDF –∑–∞–ø—Ä–æ—Å–æ–≤...")
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            intercepted_requests = self.driver.execute_script("return window.interceptedRequests || [];")
            
            if intercepted_requests:
                logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ {len(intercepted_requests)} PDF –∑–∞–ø—Ä–æ—Å–æ–≤")
                
                downloaded_files = []
                
                for i, request in enumerate(intercepted_requests):
                    try:
                        url = request.get('url', '')
                        method = request.get('method', 'GET')
                        
                        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å {i+1}: {method} {url}")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π URL
                        if method.upper() == 'POST':
                            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                            files = self._download_pdf_via_post(url, f"network_post_{i+1}", "ALGORITHM_3")
                        else:
                            # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                            files = self._download_pdf_direct(url, f"network_get_{i+1}", "ALGORITHM_3")
                        
                        if files:
                            downloaded_files.extend(files)
                            logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å {i+1} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                        continue
                
                return downloaded_files
            else:
                logger.warning("‚ö†Ô∏è PDF –∑–∞–ø—Ä–æ—Å—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã")
                
                # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ PDF URL –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                logger.info("üîÑ Fallback: –ø–æ–∏—Å–∫ PDF URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                current_url = self.driver.current_url
                if '/Document/Pdf/' in current_url:
                    logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π URL —è–≤–ª—è–µ—Ç—Å—è PDF: {current_url}")
                    files = self._download_pdf_via_post(current_url, "current_url_fallback", "ALGORITHM_3")
                    return files if files else []
                
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 3: {e}")
            return []
    
    def find_pdf_via_api_requests(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 4: –ü–æ–∏—Å–∫ PDF —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å—ã
        –ò–°–ü–†–ê–í–õ–ï–ù: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è kad.arbitr.ru
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 4: –ü–æ–∏—Å–∫ PDF —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å—ã")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            downloaded_files = []
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ PDF URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ PDF URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                
                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ PDF
                pdf_links = self.driver.find_elements(By.CSS_SELECTOR, "a[href*='Document/Pdf'], a[href*='.pdf']")
                logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(pdf_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ PDF")
                
                for i, link in enumerate(pdf_links):
                    try:
                        href = link.get_attribute('href')
                        if href and '/Document/Pdf/' in href:
                            logger.info(f"üì• API –∑–∞–ø—Ä–æ—Å {i+1}: {href}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∏
                            if self._is_blacklisted_url(href):
                                logger.warning(f"üö´ URL {i+1} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                                continue
                            
                            if not self._is_case_document_url(href):
                                logger.warning(f"‚ö†Ô∏è URL {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞")
                                continue
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ POST
                            files = self._download_pdf_via_post(href, f"api_link_{i+1}", "ALGORITHM_4")
                            if files:
                                downloaded_files.extend(files)
                                logger.info(f"‚úÖ API –∑–∞–ø—Ä–æ—Å {i+1} —É—Å–ø–µ—à–µ–Ω")
                            else:
                                logger.warning(f"‚ö†Ô∏è API –∑–∞–ø—Ä–æ—Å {i+1} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                        continue
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ PDF —Å—Å—ã–ª–æ–∫: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º—ã–µ POST –∑–∞–ø—Ä–æ—Å—ã –∫ PDF URL
            try:
                logger.info("üîÑ –ü—Ä—è–º—ã–µ POST –∑–∞–ø—Ä–æ—Å—ã –∫ PDF URL")
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π URL —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                current_url = self.driver.current_url
                if '/Document/Pdf/' in current_url:
                    logger.info(f"‚úÖ –¢–µ–∫—É—â–∏–π URL —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {current_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏
                    if not self._is_blacklisted_url(current_url):
                        if self._is_case_document_url(current_url):
                            files = self._download_pdf_via_post(current_url, "current_url_api", "ALGORITHM_4")
                            if files:
                                downloaded_files.extend(files)
                                logger.info("‚úÖ –ü—Ä—è–º–æ–π POST –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
                        else:
                            logger.warning("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞")
                    else:
                        logger.warning("üö´ –¢–µ–∫—É—â–∏–π URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä—è–º—ã—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            try:
                logger.info("üîÑ –ü–æ–∏—Å–∫ PDF URL —á–µ—Ä–µ–∑ JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
                
                js_script = """
                function findPdfUrlsInJS() {
                    const pdfUrls = [];
                    
                    // –ò—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    const globalVars = ['pdfUrl', 'documentUrl', 'fileUrl', 'downloadUrl'];
                    for (let varName of globalVars) {
                        if (window[varName] && typeof window[varName] === 'string') {
                            if (window[varName].includes('Document/Pdf')) {
                                pdfUrls.push(window[varName]);
                                console.log('–ù–∞–π–¥–µ–Ω PDF URL –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π', varName, ':', window[varName]);
                            }
                        }
                    }
                    
                    // –ò—â–µ–º –≤ data –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                    const elements = document.querySelectorAll('[data-pdf-url], [data-document-url], [data-file-url]');
                    for (let element of elements) {
                        const pdfUrl = element.getAttribute('data-pdf-url') || 
                                     element.getAttribute('data-document-url') || 
                                     element.getAttribute('data-file-url');
                        if (pdfUrl && pdfUrl.includes('Document/Pdf')) {
                            pdfUrls.push(pdfUrl);
                            console.log('–ù–∞–π–¥–µ–Ω PDF URL –≤ data –∞—Ç—Ä–∏–±—É—Ç–µ:', pdfUrl);
                        }
                    }
                    
                    // –ò—â–µ–º –≤ onclick —Å–æ–±—ã—Ç–∏—è—Ö
                    const onclickElements = document.querySelectorAll('[onclick*="Document"], [onclick*="Pdf"]');
                    for (let element of onclickElements) {
                        const onclick = element.getAttribute('onclick');
                        if (onclick) {
                            const urlMatch = onclick.match(/['"]([^'"]*Document/Pdf[^'"]*)['"]/);
                            if (urlMatch) {
                                pdfUrls.push(urlMatch[1]);
                                console.log('–ù–∞–π–¥–µ–Ω PDF URL –≤ onclick:', urlMatch[1]);
                            }
                        }
                    }
                    
                    return [...new Set(pdfUrls)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                }
                
                return findPdfUrlsInJS();
                """
                
                js_pdf_urls = self.driver.execute_script(js_script)
                
                if js_pdf_urls:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(js_pdf_urls)} PDF URL –≤ JavaScript")
                    
                    for i, pdf_url in enumerate(js_pdf_urls):
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                            if not pdf_url.startswith('http'):
                                if pdf_url.startswith('/'):
                                    base_url = '/'.join(page_url.split('/')[:3])
                                    full_url = base_url + pdf_url
                                else:
                                    full_url = page_url.rstrip('/') + '/' + pdf_url
                            else:
                                full_url = pdf_url
                            
                            logger.info(f"üì• JavaScript API –∑–∞–ø—Ä–æ—Å {i+1}: {full_url}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∏
                            if self._is_blacklisted_url(full_url):
                                logger.warning(f"üö´ URL {i+1} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                                continue
                            
                            if not self._is_case_document_url(full_url):
                                logger.warning(f"‚ö†Ô∏è URL {i+1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞")
                                continue
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ POST
                            files = self._download_pdf_via_post(full_url, f"js_api_{i+1}", "ALGORITHM_4")
                            if files:
                                downloaded_files.extend(files)
                                logger.info(f"‚úÖ JavaScript API –∑–∞–ø—Ä–æ—Å {i+1} —É—Å–ø–µ—à–µ–Ω")
                            else:
                                logger.warning(f"‚ö†Ô∏è JavaScript API –∑–∞–ø—Ä–æ—Å {i+1} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JavaScript API –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {e}")
                            continue
                else:
                    logger.warning("‚ö†Ô∏è PDF URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JavaScript")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ JavaScript: {e}")
            
            if downloaded_files:
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 4 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return downloaded_files
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 4: {e}")
            return []
    
    def comprehensive_pdf_extraction(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ complex.py
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
        
        try:
            all_files = []
            
            # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä—è–º–æ–π URL —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ URL")
            direct_files = self.find_pdf_url_direct(page_url)
            if direct_files:
                all_files.extend(direct_files)
                logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ø—Ä—è–º–æ–π URL –Ω–∞–π–¥–µ–Ω {len(direct_files)} —Ñ–∞–π–ª–æ–≤")
                # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –ª–∏ —Å–∫–∞—á–∞–Ω—ã —Ñ–∞–π–ª—ã
                for f in direct_files:
                    if os.path.exists(f):
                        size = os.path.getsize(f)
                        logger.info(f"üì¶ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(f)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {f}")
            
            # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã Selenium
            logger.info("üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            network_files = self.find_pdf_in_network_requests(page_url)
            if network_files:
                all_files.extend(network_files)
                logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–π–¥–µ–Ω—ã {len(network_files)} —Ñ–∞–π–ª–æ–≤")
                # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –ª–∏ —Å–∫–∞—á–∞–Ω—ã —Ñ–∞–π–ª—ã
                for f in network_files:
                    if os.path.exists(f):
                        size = os.path.getsize(f)
                        logger.info(f"üì¶ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(f)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {f}")
            
            # 3. –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–µ—Ä–µ–∑ Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            logger.info("üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
            selenium_files = self.extract_pdf_via_selenium(page_url)
            if selenium_files:
                all_files.extend(selenium_files)
                logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: Selenium –Ω–∞–π–¥–µ–Ω {len(selenium_files)} —Ñ–∞–π–ª–æ–≤")
                # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –ª–∏ —Å–∫–∞—á–∞–Ω—ã —Ñ–∞–π–ª—ã
                for f in selenium_files:
                    if os.path.exists(f):
                        size = os.path.getsize(f)
                        logger.info(f"üì¶ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(f)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {f}")
            
            # 4. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å—ã
            logger.info("üîÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: API –∑–∞–ø—Ä–æ—Å—ã")
            api_files = self.find_pdf_via_api_requests(page_url)
            if api_files:
                all_files.extend(api_files)
                logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: API –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–π–¥–µ–Ω—ã {len(api_files)} —Ñ–∞–π–ª–æ–≤")
                # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –ª–∏ —Å–∫–∞—á–∞–Ω—ã —Ñ–∞–π–ª—ã
                for f in api_files:
                    if os.path.exists(f):
                        size = os.path.getsize(f)
                        logger.info(f"üì¶ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(f)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {f}")
            
            if all_files:
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 5 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤")
                return all_files
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 5 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 5: {e}")
            return []
    
    def _download_pdf_direct(self, pdf_url, method_name, algorithm_name="unknown"):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç PDF –ø–æ –ø—Ä—è–º–æ–º—É URL —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π –∏ –≤–∞–ª–∏–¥–Ω—ã–π
            if not pdf_url or len(pdf_url.strip()) < 5:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {pdf_url}")
                return []
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
            pdf_url = pdf_url.strip()
            if not pdf_url.startswith('http'):
                logger.warning(f"‚ö†Ô∏è –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {pdf_url}")
                return []
            
            # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                current_page_url = self.driver.current_url if self.driver else "N/A"
                logger.info(f"üìç [URL LOG] –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_page_url}")
                logger.info(f"üì• [URL LOG] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å URL: {pdf_url}")
                logger.info(f"üîß [URL LOG] –ê–ª–≥–æ—Ä–∏—Ç–º: {algorithm_name}, –ú–µ—Ç–æ–¥: {method_name}")
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ URL: {e}")
            
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —á–µ—Ä–µ–∑ {algorithm_name}: {pdf_url}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/pdf,application/octet-stream,*/*',
                'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            }
            
            response = requests.get(pdf_url, headers=headers, timeout=30)
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
            content_type = response.headers.get('content-type', '').lower()
            if 'pdf' not in content_type and not response.content.startswith(b'%PDF'):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF (Content-Type: {content_type}): {pdf_url}")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if len(response.content) < 1000:  # –ú–∏–Ω–∏–º—É–º 1KB
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({len(response.content)} –±–∞–π—Ç): {pdf_url}")
                return []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º URL –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            import hashlib
            url_hash = hashlib.md5(pdf_url.encode()).hexdigest()[:8]
            filename = f"{algorithm_name}_{method_name}_{url_hash}.pdf"
            filepath = os.path.join(self.files_dir, filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            if os.path.exists(filepath):
                existing_size = os.path.getsize(filepath)
                if existing_size == len(response.content):
                    logger.info(f"‚ÑπÔ∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ç–µ–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º: {filename}")
                    return [filepath]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            final_filename = os.path.basename(filepath)
            logger.info(f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ {algorithm_name}: {final_filename} ({len(response.content)} –±–∞–π—Ç)")
            return [filepath]
            
        except requests.exceptions.RequestException as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ {algorithm_name} {pdf_url}: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {algorithm_name} {pdf_url}: {e}")
            return []
    
    def _download_pdf_via_post(self, pdf_url, method_name, algorithm_name="unknown"):
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç PDF —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è kad.arbitr.ru)
        –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π –∏ –≤–∞–ª–∏–¥–Ω—ã–π
            if not pdf_url or len(pdf_url.strip()) < 5:
                logger.warning(f"‚ö†Ô∏è [POST] –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL: {pdf_url}")
                return []
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL
            pdf_url = pdf_url.strip()
            if not pdf_url.startswith('http'):
                logger.warning(f"‚ö†Ô∏è [POST] –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {pdf_url}")
                return []
            
            logger.info(f"üì• [POST] –ó–∞–ø—Ä–æ—Å PDF —á–µ—Ä–µ–∑ {algorithm_name}: {pdf_url}")
            
            # –¢–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏
            headers = {
                'authority': 'kad.arbitr.ru',
                'method': 'POST',
                'scheme': 'https',
                'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'accept-encoding': 'gzip, deflate, br, zstd',
                'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'cache-control': 'no-cache',
                'content-type': 'application/x-www-form-urlencoded',
                'origin': 'https://kad.arbitr.ru',
                'pragma': 'no-cache',
                'priority': 'u=0, i',
                'referer': pdf_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL –∫–∞–∫ referer
                'sec-ch-ua': '"Chromium";v="140", "Not=A?Brand";v="24", "Google Chrome";v="140"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                'sec-fetch-dest': 'document',
                'sec-fetch-mode': 'navigate',
                'sec-fetch-site': 'same-origin',
                'upgrade-insecure-requests': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36'
            }
            
            # –ü–æ–ª—É—á–∞–µ–º cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
            try:
                cookies = self.driver.get_cookies()
                cookie_dict = {cookie['name']: cookie['value'] for cookie in cookies}
                logger.info(f"üç™ [POST] –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(cookie_dict)} cookies –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [POST] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cookies: {e}")
                cookie_dict = {}
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ POST –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
            post_data_variants = [
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ)
                {},
                # –í–∞—Ä–∏–∞–Ω—Ç 2: isAddStamp=True (–∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
                {'isAddStamp': 'True'},
                # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å content-length: 60 (–∫–∞–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ)
                {'': ''},
                # –í–∞—Ä–∏–∞–Ω—Ç 4: –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                {'isAddStamp': 'True', 'format': 'pdf'},
                # –í–∞—Ä–∏–∞–Ω—Ç 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                {'download': 'true', 'isAddStamp': 'True'},
            ]
            
            for i, post_data in enumerate(post_data_variants):
                try:
                    logger.info(f"üîÑ [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1}: {post_data}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                    response = requests.post(
                        pdf_url, 
                        headers=headers, 
                        data=post_data, 
                        cookies=cookie_dict,
                        timeout=30,
                        allow_redirects=True
                    )
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    logger.info(f"üìä [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    logger.info(f"üìä [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - Content-Type: {response.headers.get('content-type', 'N/A')}")
                    logger.info(f"üìä [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - Content-Length: {response.headers.get('content-length', 'N/A')}")
                    logger.info(f"üìä [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - Server: {response.headers.get('server', 'N/A')}")
                    logger.info(f"üìä [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
                    if response.status_code != 200:
                        logger.warning(f"‚ö†Ô∏è [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                        logger.warning(f"‚ö†Ô∏è [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
                    content_type = response.headers.get('content-type', '').lower()
                    is_pdf_content = 'pdf' in content_type or response.content.startswith(b'%PDF')
                    
                    logger.info(f"üìÑ [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - PDF –∫–æ–Ω—Ç–µ–Ω—Ç: {is_pdf_content}")
                    logger.info(f"üìÑ [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {response.content[:50]}")
                    
                    if is_pdf_content:
                        logger.info(f"‚úÖ [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} —É—Å–ø–µ—à–µ–Ω: {content_type}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        if len(response.content) < 1000:  # –ú–∏–Ω–∏–º—É–º 1KB
                            logger.warning(f"‚ö†Ô∏è [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({len(response.content)} –±–∞–π—Ç)")
                            continue
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        import hashlib
                        url_hash = hashlib.md5(pdf_url.encode()).hexdigest()[:8]
                        filename = f"{algorithm_name}_{method_name}_post_{url_hash}.pdf"
                        filepath = os.path.join(self.files_dir, filename)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        with open(filepath, 'wb') as f:
                            f.write(response.content)
                        
                        final_filename = os.path.basename(filepath)
                        logger.info(f"‚úÖ [POST] PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ {algorithm_name}: {final_filename} ({len(response.content)} –±–∞–π—Ç)")
                        return [filepath]
                    else:
                        logger.warning(f"‚ö†Ô∏è [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –ù–µ PDF –∫–æ–Ω—Ç–µ–Ω—Ç: {content_type}")
                        logger.warning(f"‚ö†Ô∏è [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:200]}")
                        continue
                        
                except requests.exceptions.RequestException as e:
                    logger.error(f"‚ùå [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                    continue
                except Exception as e:
                    logger.error(f"‚ùå [POST] –í–∞—Ä–∏–∞–Ω—Ç {i+1} - –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    continue
            
            # –ï—Å–ª–∏ POST –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º GET
            logger.warning("üîÑ [POST] –í—Å–µ POST –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º GET...")
            return self._download_pdf_direct(pdf_url, method_name, algorithm_name)
            
        except Exception as e:
            logger.error(f"‚ùå [POST] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ POST —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ {algorithm_name} {pdf_url}: {e}")
            import traceback
            logger.error(f"‚ùå [POST] Traceback: {traceback.format_exc()}")
            return []
    
    def run_all_algorithms(self, case_number):
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF")
        logger.info("=" * 80)
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            page_url = self.driver.current_url
            logger.info(f"üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_url}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
        
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        if '/Document/Pdf/' in page_url or page_url.endswith('.pdf'):
            logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç!")
            logger.info(f"üîó URL –¥–æ–∫—É–º–µ–Ω—Ç–∞: {page_url}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                logger.info("üì• –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                direct_files = self._download_pdf_direct(page_url, "direct_page_url", "DIRECT_LINK")
                if direct_files:
                    logger.info(f"‚úÖ –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {len(direct_files)} —Ñ–∞–π–ª–æ–≤")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                import traceback
                logger.warning(f"‚ö†Ô∏è Traceback: {traceback.format_exc()}")
    
        all_downloaded_files = []
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 1: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ URL
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 1: –ü–æ–∏—Å–∫ –ø—Ä—è–º–æ–≥–æ URL")
            logger.info("-" * 50)
            files = self.find_pdf_url_direct(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 1 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 1 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 1: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 2: Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 2: Selenium –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
            logger.info("-" * 50)
            files = self.extract_pdf_via_selenium(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 2 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 2 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 2: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 3: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            logger.info("-" * 50)
            files = self.find_pdf_in_network_requests(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 3 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 3 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 3: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 4: API –∑–∞–ø—Ä–æ—Å—ã
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 4: API –∑–∞–ø—Ä–æ—Å—ã")
            logger.info("-" * 50)
            files = self.find_pdf_via_api_requests(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 4 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 4 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 4: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 5: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥")
            logger.info("-" * 50)
            files = self.comprehensive_pdf_extraction(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 5 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 5 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 5: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 6: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 6: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            logger.info("-" * 50)
            files = self.run_advanced_strategies(case_number, page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 6 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 6 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 6: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 7: PDF.js API
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 7: PDF.js API")
            logger.info("-" * 50)
            files = self.extract_pdf_from_pdfjs_api(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 7 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 7 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 7: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 8: Blob URL –ø–µ—Ä–µ—Ö–≤–∞—Ç
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 8: Blob URL –ø–µ—Ä–µ—Ö–≤–∞—Ç")
            logger.info("-" * 50)
            files = self.extract_pdf_via_blob_interception(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 8 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 8 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 8: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 9: –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å" + –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 9: –ö–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å' + –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            logger.info("-" * 50)
            files = self.download_via_button_and_monitoring(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 9 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 9 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 9: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 10: Print to PDF
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 10: Print to PDF")
            logger.info("-" * 50)
            files = self.download_via_print_to_pdf(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 10 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 10 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 10: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 11: Ctrl+S + –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 11: Ctrl+S + –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞")
            logger.info("-" * 50)
            files = self.download_via_ctrl_s_dialog(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 11 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 11 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 11: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º 12: –ú–µ—Ç–æ–¥—ã –∏–∑ autoKad.py
        try:
            logger.info("üîÑ –ê–õ–ì–û–†–ò–¢–ú 12: –ú–µ—Ç–æ–¥—ã –∏–∑ autoKad.py")
            logger.info("-" * 50)
            files = self.download_via_autokad_methods(page_url)
            if files:
                all_downloaded_files.extend(files)
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 12 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                for i, file_path in enumerate(files, 1):
                    if os.path.exists(file_path):
                        size = os.path.getsize(file_path)
                        logger.info(f"   üìÑ –§–∞–π–ª {i}: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"   ‚ùå –§–∞–π–ª {i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 12 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 12: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("=" * 80)
        logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–õ–ì–û–†–ò–¢–ú–û–í")
        logger.info("=" * 80)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_files = list(set(all_downloaded_files))
        logger.info(f"üéâ –í–°–ï –ê–õ–ì–û–†–ò–¢–ú–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        logger.info(f"üìÑ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_downloaded_files)}")
        logger.info(f"üìÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(unique_files)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        existing_files = []
        missing_files = []
        
        for file_path in unique_files:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                existing_files.append((file_path, size))
                logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(file_path)} ({size} –±–∞–π—Ç)")
            else:
                missing_files.append(file_path)
                logger.warning(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        
        logger.info(f"‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_files)}")
        logger.info(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(missing_files)}")
        logger.info("=" * 80)
        
        return unique_files
    
    def run_advanced_strategies(self, case_number, case_url):
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF
        –ê–ª–≥–æ—Ä–∏—Ç–º 6: –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã + –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ô: –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright
        """
        logger.info("üöÄ –ê–õ–ì–û–†–ò–¢–ú 6: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Playwright
            try:
                import playwright
                playwright_available = True
                logger.info("‚úÖ Playwright –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                playwright_available = False
                logger.warning("‚ö†Ô∏è Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTP —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
                logger.info("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Playwright –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
                logger.info("   1) pip install playwright>=1.40.0")
                logger.info("   2) python -m playwright install chromium")
                logger.info("   –ò–õ–ò –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python backend/install_playwright.py")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            from advanced_pdf_strategies import AdvancedPDFExtractor
            
            all_files = []
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã (–í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–Ω–∞)
            try:
                logger.info("üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã")
                
                # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ cookies –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞–π–≤–µ—Ä–∞
                html_content = self.driver.page_source
                cookies = self.driver.get_cookies()
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
                advanced_extractor = AdvancedPDFExtractor(self.files_dir)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º PDF —á–µ—Ä–µ–∑ HTTP
                http_files = advanced_extractor.extract_with_controlled_http(
                    case_url, html_content, cookies
                )
                
                if http_files:
                    all_files.extend(http_files)
                    logger.info(f"‚úÖ HTTP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {len(http_files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    logger.info("‚ö†Ô∏è HTTP —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ (Playwright) - –û–ü–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø
            if playwright_available:
                try:
                    logger.info("üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞")
                    
                    from playwright_integration import PlaywrightPDFExtractorSync
                    
                    # –°–æ–∑–¥–∞–µ–º Playwright —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
                    playwright_extractor = PlaywrightPDFExtractorSync(self.files_dir)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º PDF —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç
                    interception_files = playwright_extractor.extract_pdfs(case_url, timeout=30)
                    
                    if interception_files:
                        all_files.extend(interception_files)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {len(interception_files)} —Ñ–∞–π–ª–æ–≤")
                    else:
                        logger.info("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞: {e}")
            else:
                logger.info("‚è≠Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2 –ø—Ä–æ–ø—É—â–µ–Ω–∞ (Playwright –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_files = list(set(all_files))
            
            if unique_files:
                logger.info(f"‚úÖ –ê–õ–ì–û–†–ò–¢–ú 6 –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(unique_files)} —Ñ–∞–π–ª–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –ê–õ–ì–û–†–ò–¢–ú 6 –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            return unique_files
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 6: {e}")
            logger.info("üí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Playwright")
            return []
    
    def extract_pdf_from_pdfjs_api(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 7: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ PDF —á–µ—Ä–µ–∑ PDF.js API
        –°–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å PDF.js
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 7: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PDF.js API")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ PDF.js
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF.js (10 —Å–µ–∫)...")
            time.sleep(10)
            
            # JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —á–µ—Ä–µ–∑ PDF.js API
            js_extract_pdf = """
            return new Promise((resolve) => {
                try {
                    console.log('üîç –ü–æ–∏—Å–∫ PDF.js...');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF.js
                    if (typeof PDFViewerApplication === 'undefined') {
                        console.log('‚ùå PDFViewerApplication –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        resolve(null);
                        return;
                    }
                    
                    console.log('‚úÖ PDFViewerApplication –Ω–∞–π–¥–µ–Ω');
                    
                    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PDF.js
                    PDFViewerApplication.initializedPromise.then(() => {
                        console.log('‚úÖ PDF.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                        
                        const pdfDocument = PDFViewerApplication.pdfDocument;
                        
                        if (!pdfDocument) {
                            console.log('‚ùå PDF document –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                            resolve(null);
                            return;
                        }
                        
                        console.log('‚úÖ PDF document –Ω–∞–π–¥–µ–Ω, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
                        console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü:', pdfDocument.numPages);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ PDF
                        pdfDocument.getData().then((data) => {
                            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data.length, '–±–∞–π—Ç');
                            
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Python
                            resolve({
                                data: Array.from(data),
                                numPages: pdfDocument.numPages,
                                fingerprint: pdfDocument.fingerprints ? pdfDocument.fingerprints[0] : 'unknown'
                            });
                        }).catch((error) => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ getData:', error);
                            resolve(null);
                        });
                        
                    }).catch((error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ initializedPromise:', error);
                        resolve(null);
                    });
                    
                } catch (error) {
                    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
                    resolve(null);
                }
            });
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF...")
            self.driver.set_script_timeout(60)  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            result = self.driver.execute_async_script(js_extract_pdf)
            
            if result and result.get('data'):
                logger.info(f"‚úÖ PDF –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(result['data'])} –±–∞–π—Ç, {result.get('numPages', '?')} —Å—Ç—Ä–∞–Ω–∏—Ü")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
                pdf_bytes = bytes(result['data'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
                if not pdf_bytes.startswith(b'%PDF'):
                    logger.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è PDF —Ñ–∞–π–ª–æ–º")
                    return []
                
                import hashlib
                data_hash = hashlib.md5(pdf_bytes).hexdigest()[:8]
                filename = f"ALGORITHM_7_pdfjs_api_{data_hash}.pdf"
                filepath = os.path.join(self.files_dir, filename)
                
                with open(filepath, 'wb') as f:
                    f.write(pdf_bytes)
                
                logger.info(f"‚úÖ PDF –∏–∑–≤–ª–µ—á–µ–Ω —á–µ—Ä–µ–∑ PDF.js API: {filename} ({len(pdf_bytes)} –±–∞–π—Ç, {result.get('numPages')} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                return [filepath]
            else:
                logger.warning("‚ö†Ô∏è PDF.js –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ PDF –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 7: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return []
    
    def extract_pdf_via_blob_interception(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 8: –ü–µ—Ä–µ—Ö–≤–∞—Ç Blob URL
        –î–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö PDF
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 8: –ü–µ—Ä–µ—Ö–≤–∞—Ç Blob URL")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π
            logger.info("üï∏Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Blob –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤...")
            
            setup_blob_interceptor = """
            window.interceptedBlobs = [];
            window.interceptedBlobUrls = [];
            
            console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Blob –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤...');
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Blob
            const originalBlob = window.Blob;
            window.Blob = function(...args) {
                const blob = new originalBlob(...args);
                
                if (blob.type === 'application/pdf') {
                    try {
                        const blobUrl = URL.createObjectURL(blob);
                        window.interceptedBlobs.push({
                            url: blobUrl,
                            size: blob.size,
                            type: blob.type,
                            timestamp: Date.now()
                        });
                        console.log('‚úÖ PDF Blob –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω:', blobUrl, blob.size, '–±–∞–π—Ç');
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ createObjectURL:', e);
                    }
                }
                
                return blob;
            };
            
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º URL.createObjectURL
            const originalCreateObjectURL = URL.createObjectURL;
            URL.createObjectURL = function(obj) {
                const url = originalCreateObjectURL(obj);
                
                if (obj.type === 'application/pdf') {
                    window.interceptedBlobUrls.push({
                        url: url,
                        size: obj.size,
                        type: obj.type,
                        timestamp: Date.now()
                    });
                    console.log('‚úÖ PDF ObjectURL –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω:', url, obj.size, '–±–∞–π—Ç');
                }
                
                return url;
            };
            
            console.log('‚úÖ Blob –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
            """
            
            self.driver.execute_script(setup_blob_interceptor)
            logger.info("‚úÖ Blob –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è Blob
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Blob –æ–±—ä–µ–∫—Ç–æ–≤ (10 —Å–µ–∫)...")
            time.sleep(10)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ Blob
            blobs = self.driver.execute_script("return window.interceptedBlobs || [];")
            blob_urls = self.driver.execute_script("return window.interceptedBlobUrls || [];")
            
            all_blobs = blobs + blob_urls
            
            if all_blobs:
                logger.info(f"üìÑ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ {len(all_blobs)} Blob –æ–±—ä–µ–∫—Ç–æ–≤")
                
                downloaded_files = []
                
                for i, blob_info in enumerate(all_blobs):
                    try:
                        blob_url = blob_info['url']
                        blob_size = blob_info.get('size', 0)
                        
                        logger.info(f"üì• –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Blob {i+1}: {blob_url} ({blob_size} –±–∞–π—Ç)")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Blob —á–µ—Ä–µ–∑ JavaScript
                        self.driver.set_script_timeout(60)
                        
                        pdf_data = self.driver.execute_async_script("""
                            var callback = arguments[arguments.length - 1];
                            var blobUrl = arguments[0];
                            
                            console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ Blob –¥–∞–Ω–Ω—ã—Ö:', blobUrl);
                            
                            fetch(blobUrl)
                                .then(response => {
                                    console.log('Response –ø–æ–ª—É—á–µ–Ω');
                                    return response.arrayBuffer();
                                })
                                .then(buffer => {
                                    console.log('ArrayBuffer –ø–æ–ª—É—á–µ–Ω:', buffer.byteLength, '–±–∞–π—Ç');
                                    var bytes = new Uint8Array(buffer);
                                    callback(Array.from(bytes));
                                })
                                .catch(error => {
                                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Blob:', error);
                                    callback(null);
                                });
                        """, blob_url)
                        
                        if pdf_data:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
                            pdf_bytes = bytes(pdf_data)
                            
                            logger.info(f"‚úÖ Blob –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {len(pdf_bytes)} –±–∞–π—Ç")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
                            if not pdf_bytes.startswith(b'%PDF'):
                                logger.warning(f"‚ö†Ô∏è Blob –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF —Ñ–∞–π–ª–æ–º")
                                continue
                            
                            import hashlib
                            data_hash = hashlib.md5(pdf_bytes).hexdigest()[:8]
                            filename = f"ALGORITHM_8_blob_{data_hash}.pdf"
                            filepath = os.path.join(self.files_dir, filename)
                            
                            with open(filepath, 'wb') as f:
                                f.write(pdf_bytes)
                            
                            downloaded_files.append(filepath)
                            logger.info(f"‚úÖ Blob –∏–∑–≤–ª–µ—á–µ–Ω: {filename} ({len(pdf_bytes)} –±–∞–π—Ç)")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Blob {i+1}")
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Blob {i+1}: {e}")
                        continue
                
                return downloaded_files
            else:
                logger.warning("‚ö†Ô∏è Blob –æ–±—ä–µ–∫—Ç—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 8: {e}")
            return []
    
    def download_via_button_and_monitoring(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 9: –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å" + –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Downloads
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 9: –ö–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å' + –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            time.sleep(1.5)
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è kad.arbitr.ru
            download_button_selectors = [
                "#save",  # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                "button#save",
                "a#save",
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "//button[contains(text(), '–°–∫–∞—á–∞—Ç—å')]",
                "//a[contains(text(), '–°–∫–∞—á–∞—Ç—å')]",
                "//button[contains(text(), 'Download')]",
                "//a[contains(text(), 'Download')]",
                "//button[contains(@title, '–°–∫–∞—á–∞—Ç—å')]",
                "//a[contains(@title, '–°–∫–∞—á–∞—Ç—å')]",
                "button[title*='–°–∫–∞—á–∞—Ç—å']",
                "a[title*='–°–∫–∞—á–∞—Ç—å']",
                "button[aria-label*='–°–∫–∞—á–∞—Ç—å']",
                "a[aria-label*='–°–∫–∞—á–∞—Ç—å']",
                ".download-button",
                "#download-btn",
                "button[download]",
                "a[download]",
                "[onclick*='download']",
                "[onclick*='Download']"
            ]
            
            download_btn = None
            used_selector = None
            
            for selector in download_button_selectors:
                try:
                    if selector.startswith('//'):
                        # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                        download_btn = WebDriverWait(self.driver, 3).until(
                            EC.element_to_be_clickable((By.XPATH, selector))
                        )
                    else:
                        # CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                        download_btn = WebDriverWait(self.driver, 3).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                    
                    used_selector = selector
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å': {selector}")
                    break
                    
                except:
                    continue
            
            if not download_btn:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º Downloads –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ __init__
            downloads_dir = getattr(self, 'downloads_dir', None)
            if not downloads_dir or not os.path.exists(downloads_dir):
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É Downloads
                import platform
                if platform.system() == "Windows":
                    downloads_dir = os.path.join(os.path.expanduser("~"), "Downloads")
                else:
                    downloads_dir = os.path.join(os.path.expanduser("~"), "Downloads")
                
                logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º Downloads: {downloads_dir}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –î–û —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            before_files = set(os.listdir(downloads_dir)) if os.path.exists(downloads_dir) else set()
            logger.info(f"üìä –§–∞–π–ª–æ–≤ –≤ Downloads –î–û: {len(before_files)}")
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
            logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ '–°–∫–∞—á–∞—Ç—å'...")
            try:
                download_btn.click()
                logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º JavaScript: {e}")
                self.driver.execute_script("arguments[0].click();", download_btn)
                logger.info("‚úÖ JavaScript –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            time.sleep(2)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∂–∏–º–∞–µ–º Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            try:
                import pyautogui
                logger.info("‚å®Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (Enter)...")
                pyautogui.press('enter')
                time.sleep(1)
                logger.info("‚úÖ Enter –Ω–∞–∂–∞—Ç")
            except ImportError:
                logger.warning("‚ö†Ô∏è PyAutoGUI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            logger.info("‚è≥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ Downloads (30 —Å–µ–∫)...")
            max_wait = 30
            start_time = time.time()
            check_count = 0
            
            while time.time() - start_time < max_wait:
                if not os.path.exists(downloads_dir):
                    time.sleep(0.5)
                    continue
                
                current_files = set(os.listdir(downloads_dir))
                new_files = current_files - before_files
                
                check_count += 1
                if check_count % 10 == 0:
                    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ #{check_count}: –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ {len(new_files)}")
                
                # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã
                for filename in new_files:
                    if filename.endswith('.pdf') and not filename.endswith('.crdownload'):
                        source_path = os.path.join(downloads_dir, filename)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (—á—Ç–æ–±—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å)
                        try:
                            file_size = os.path.getsize(source_path)
                            if file_size > 1000:  # –ú–∏–Ω–∏–º—É–º 1KB
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π PDF: {filename} ({file_size} –±–∞–π—Ç)")
                                
                                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                                import hashlib
                                file_hash = hashlib.md5(filename.encode()).hexdigest()[:8]
                                target_filename = f"ALGORITHM_9_button_{file_hash}.pdf"
                                target_path = os.path.join(self.files_dir, target_filename)
                                
                                import shutil
                                shutil.move(source_path, target_path)
                                
                                logger.info(f"‚úÖ PDF —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {target_filename} ({file_size} –±–∞–π—Ç)")
                                return [target_path]
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
                            continue
                
                time.sleep(0.5)
            
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ Downloads –∑–∞ {max_wait} —Å–µ–∫—É–Ω–¥")
            logger.info(f"üìä –§–∞–π–ª–æ–≤ –≤ Downloads –ü–û–°–õ–ï: {len(current_files) if 'current_files' in locals() else '?'}")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 9: {e}")
            return []
    
    def download_via_print_to_pdf(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 10: Print to PDF
        –ò–°–ü–†–ê–í–õ–ï–ù: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å PDF —á–µ—Ä–µ–∑ POST, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CDP
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 10: Print to PDF")
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {page_url}")
            self.driver.get(page_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (5 —Å–µ–∫)...")
            time.sleep(5)
            
            # –°–ù–ê–ß–ê–õ–ê: –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å PDF —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
            if '/Document/Pdf/' in page_url:
                logger.info("üì• [ALGORITHM_10] –ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —á–µ—Ä–µ–∑ POST...")
                try:
                    post_files = self._download_pdf_via_post(page_url, "print_post", "ALGORITHM_10")
                    if post_files:
                        logger.info(f"‚úÖ [ALGORITHM_10] PDF —Å–∫–∞—á–∞–Ω —á–µ—Ä–µ–∑ POST: {len(post_files)} —Ñ–∞–π–ª–æ–≤")
                        return post_files
                    else:
                        logger.warning("‚ö†Ô∏è [ALGORITHM_10] POST –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ALGORITHM_10] –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
            # –ï–°–õ–ò POST –ù–ï –°–†–ê–ë–û–¢–ê–õ: –ò—Å–ø–æ–ª—å–∑—É–µ–º CDP –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ PDF
            logger.info("üñ®Ô∏è [ALGORITHM_10] –ò—Å–ø–æ–ª—å–∑—É–µ–º CDP –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ PDF...")
            
            try:
                result = self.driver.execute_cdp_cmd('Page.printToPDF', {
                    'printBackground': True,
                    'landscape': False,
                    'paperWidth': 8.27,  # A4 —à–∏—Ä–∏–Ω–∞ –≤ –¥—é–π–º–∞—Ö
                    'paperHeight': 11.69,  # A4 –≤—ã—Å–æ—Ç–∞ –≤ –¥—é–π–º–∞—Ö
                    'marginTop': 0,
                    'marginBottom': 0,
                    'marginLeft': 0,
                    'marginRight': 0,
                    'preferCSSPageSize': True,
                    'displayHeaderFooter': False
                })
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                import base64
                pdf_data = base64.b64decode(result['data'])
                
                logger.info(f"üìä [ALGORITHM_10] CDP —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(pdf_data)} –±–∞–π—Ç")
                logger.info(f"üìä [ALGORITHM_10] –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {pdf_data[:50]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
                if not pdf_data.startswith(b'%PDF'):
                    logger.warning("‚ö†Ô∏è [ALGORITHM_10] CDP —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF")
                    logger.warning(f"‚ö†Ô∏è [ALGORITHM_10] –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {pdf_data[:100]}")
                    return []
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                import hashlib
                data_hash = hashlib.md5(pdf_data).hexdigest()[:8]
                filename = f"ALGORITHM_10_print_{data_hash}.pdf"
                filepath = os.path.join(self.files_dir, filename)
                
                with open(filepath, 'wb') as f:
                    f.write(pdf_data)
                
                logger.info(f"‚úÖ [ALGORITHM_10] PDF —á–µ—Ä–µ–∑ CDP: {filename} ({len(pdf_data)} –±–∞–π—Ç)")
                return [filepath]
                
            except Exception as cdp_error:
                logger.error(f"‚ùå [ALGORITHM_10] –û—à–∏–±–∫–∞ CDP: {cdp_error}")
                return []
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 10: {e}")
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return []
    
    def download_via_ctrl_s_dialog(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 11: Ctrl+S + –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ Windows
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 11: Ctrl+S + –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞")
        logger.info("=" * 80)
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try:
                current_url = self.driver.current_url
                logger.info(f"üìç [CTRL+S] –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_url}")
            except:
                logger.info(f"üìç [CTRL+S] –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_url}")
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É—Ç–∏
            downloads_dir = r"D:\DOWNLOADS"
            target_dir = r"D:\CODE\sinichka_python\github_pages\darkus079.github.io\backend\files"
            
            logger.info(f"üìÅ [CTRL+S] –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {downloads_dir}")
            logger.info(f"üìÅ [CTRL+S] –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {target_dir}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            os.makedirs(downloads_dir, exist_ok=True)
            os.makedirs(target_dir, exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PyAutoGUI
            try:
                import pyautogui
                logger.info("‚úÖ [CTRL+S] PyAutoGUI –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                logger.warning("‚ö†Ô∏è [CTRL+S] PyAutoGUI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyautogui>=0.9.54")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            before_files = set(os.listdir(downloads_dir))
            logger.info(f"üìä [CTRL+S] –§–∞–π–ª–æ–≤ –≤ D:\\DOWNLOADS –î–û: {len(before_files)}")
            
            # –®–ê–ì 1: –ù–∞–∂–∏–º–∞–µ–º Ctrl+S
            logger.info("=" * 80)
            logger.info("–®–ê–ì 1: –ù–∞–∂–∞—Ç–∏–µ Ctrl+S")
            logger.info("=" * 80)
            
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Selenium
                from selenium.webdriver.common.keys import Keys
                from selenium.webdriver.common.action_chains import ActionChains
                
                self.driver.switch_to.window(self.driver.current_window_handle)
                actions = ActionChains(self.driver)
                actions.key_down(Keys.CONTROL).send_keys('s').key_up(Keys.CONTROL).perform()
                
                logger.info("‚úÖ [CTRL+S] Ctrl+S –Ω–∞–∂–∞—Ç —á–µ—Ä–µ–∑ Selenium")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [CTRL+S] Selenium –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                logger.info("üîÑ [CTRL+S] –ü—Ä–æ–±—É–µ–º PyAutoGUI...")
                
                pyautogui.hotkey('ctrl', 's')
                logger.info("‚úÖ [CTRL+S] Ctrl+S –Ω–∞–∂–∞—Ç —á–µ—Ä–µ–∑ PyAutoGUI")
            
            # –®–ê–ì 2: –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            logger.info("=" * 80)
            logger.info("–®–ê–ì 2: –û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ (1 —Å–µ–∫)")
            logger.info("=" * 80)
            time.sleep(1)
            logger.info("‚úÖ [CTRL+S] –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è")
            
            # –®–ê–ì 3: –ù–∞–∂–∏–º–∞–µ–º Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            logger.info("=" * 80)
            logger.info("–®–ê–ì 3: –ù–∞–∂–∞—Ç–∏–µ Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            logger.info("=" * 80)
            
            logger.info("‚å®Ô∏è [CTRL+S] –ù–∞–∂–∏–º–∞–µ–º Enter...")
            pyautogui.press('enter')
            logger.info("‚úÖ [CTRL+S] Enter –Ω–∞–∂–∞—Ç")
            
            # –®–ê–ì 4: –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("=" * 80)
            logger.info("–®–ê–ì 4: –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            logger.info("=" * 80)
            
            pause_duration = 10  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            logger.info(f"‚è≥ [CTRL+S] –û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ({pause_duration} —Å–µ–∫)...")
            time.sleep(pause_duration)
            logger.info("‚úÖ [CTRL+S] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –®–ê–ì 5: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ D:\DOWNLOADS –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            logger.info("=" * 80)
            logger.info("–®–ê–ì 5: –ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞")
            logger.info("=" * 80)
            
            logger.info(f"üîç [CTRL+S] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É: {downloads_dir}")
            
            if not os.path.exists(downloads_dir):
                logger.error(f"‚ùå [CTRL+S] –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {downloads_dir}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            current_files = set(os.listdir(downloads_dir))
            new_files = current_files - before_files
            
            logger.info(f"üìä [CTRL+S] –§–∞–π–ª–æ–≤ –≤ D:\\DOWNLOADS –ü–û–°–õ–ï: {len(current_files)}")
            logger.info(f"üìä [CTRL+S] –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(new_files)}")
            
            if new_files:
                logger.info(f"üìÑ [CTRL+S] –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
                for idx, fname in enumerate(new_files, 1):
                    logger.info(f"   {idx}. {fname}")
            else:
                logger.warning("‚ö†Ô∏è [CTRL+S] –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã
            downloaded_files = []
            
            for filename in new_files:
                logger.info(f"üîç [CTRL+S] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {filename}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if not filename.endswith('.pdf'):
                    logger.debug(f"‚è≠Ô∏è [CTRL+S] –ù–µ PDF, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {filename}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if filename.endswith('.crdownload') or filename.endswith('.tmp'):
                    logger.debug(f"‚è≠Ô∏è [CTRL+S] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {filename}")
                    continue
                
                source_path = os.path.join(downloads_dir, filename)
                logger.info(f"üìÇ [CTRL+S] –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å: {source_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                try:
                    file_size = os.path.getsize(source_path)
                    logger.info(f"üìè [CTRL+S] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    
                    if file_size < 1000:  # –ú–∏–Ω–∏–º—É–º 1KB
                        logger.warning(f"‚ö†Ô∏è [CTRL+S] –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    logger.info(f"‚úÖ [CTRL+S] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {file_size} –±–∞–π—Ç")
                    
                except Exception as e:
                    logger.error(f"‚ùå [CTRL+S] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}")
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                import hashlib
                file_hash = hashlib.md5(filename.encode()).hexdigest()[:8]
                target_filename = f"ALGORITHM_11_ctrl_s_{file_hash}.pdf"
                target_path = os.path.join(target_dir, target_filename)
                
                logger.info(f"üìÇ [CTRL+S] –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å: {target_path}")
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                try:
                    logger.info(f"üöö [CTRL+S] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...")
                    logger.info(f"   –ò–ó: {source_path}")
                    logger.info(f"   –í:  {target_path}")
                    
                    import shutil
                    shutil.move(source_path, target_path)
                    
                    logger.info(f"‚úÖ [CTRL+S] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω!")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
                    if os.path.exists(target_path):
                        final_size = os.path.getsize(target_path)
                        logger.info(f"‚úÖ [CTRL+S] –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ: {target_filename}")
                        logger.info(f"üìè [CTRL+S] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {final_size} –±–∞–π—Ç")
                        logger.info(f"üìç [URL LOG] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å URL: {page_url}")
                        
                        downloaded_files.append(target_path)
                    else:
                        logger.error(f"‚ùå [CTRL+S] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ!")
                    
                except Exception as e:
                    logger.error(f"‚ùå [CTRL+S] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    continue
            
            if downloaded_files:
                logger.info("=" * 80)
                logger.info(f"üéâ [CTRL+S] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤:")
                for idx, fpath in enumerate(downloaded_files, 1):
                    logger.info(f"   {idx}. {os.path.basename(fpath)}")
                logger.info("=" * 80)
                return downloaded_files
            else:
                logger.warning("=" * 80)
                logger.warning(f"‚ö†Ô∏è [CTRL+S] –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ D:\\DOWNLOADS")
                logger.warning(f"üìä [CTRL+S] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(new_files)} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                logger.warning("=" * 80)
                return []
            
        except Exception as e:
            logger.error("=" * 80)
            logger.error(f"‚ùå [CTRL+S] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 11: {e}")
            import traceback
            logger.error(f"Traceback:\n{traceback.format_exc()}")
            logger.error("=" * 80)
            return []
    
    def download_via_autokad_methods(self, page_url):
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 12: –ú–µ—Ç–æ–¥—ã –∏–∑ autoKad.py
        –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        logger.info("üîç –ê–õ–ì–û–†–ò–¢–ú 12: –ú–µ—Ç–æ–¥—ã –∏–∑ autoKad.py")
        logger.info("=" * 80)
        
        try:
            if not self.driver:
                logger.warning("‚ö†Ô∏è WebDriver –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return []
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            try:
                current_url = self.driver.current_url
                logger.info(f"üìç [AUTOKAD] –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {current_url}")
            except:
                logger.info(f"üìç [AUTOKAD] –¶–µ–ª–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_url}")
            
            downloaded_files = []
            
            # –ú–µ—Ç–æ–¥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ document.querySelector
            logger.info("üîÑ [AUTOKAD] –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ document.querySelector")
            
            try:
                # JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ PDF —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ autoKad)
                js_find_pdf_elements = """
                const elements = document.querySelectorAll('a[href*=".pdf"], a[href*="document"], a[href*="Document"]');
                const links = [];
                
                elements.forEach(element => {
                    const href = element.getAttribute('href');
                    const text = element.textContent.trim();
                    if (href && text) {
                        const fullUrl = href.startsWith('http') ? href : 
                                       (href.startsWith('/') ? 'https://kad.arbitr.ru' + href : 
                                        window.location.href + '/' + href);
                        links.push({
                            url: fullUrl,
                            text: text
                        });
                    }
                });
                
                return links;
                """
                
                pdf_links = self.driver.execute_script(js_find_pdf_elements)
                
                if pdf_links:
                    logger.info(f"‚úÖ [AUTOKAD] –ù–∞–π–¥–µ–Ω–æ {len(pdf_links)} PDF —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for i, link_info in enumerate(pdf_links):
                        url = link_info['url']
                        text = link_info['text']
                        
                        logger.info(f"üìÑ [AUTOKAD] –≠–ª–µ–º–µ–Ω—Ç {i+1}: {text}")
                        logger.info(f"üîó [AUTOKAD] URL: {url}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        if self._is_blacklisted_url(url):
                            logger.warning(f"üö´ [AUTOKAD] URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–µ–ª–∞
                        if not self._is_case_document_url(url):
                            logger.debug(f"‚ö†Ô∏è [AUTOKAD] –ù–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–µ–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ POST
                        files = self._download_pdf_via_post(url, f"autokad_querySelector_{i+1}", "ALGORITHM_12")
                        if files:
                            downloaded_files.extend(files)
                            logger.info(f"‚úÖ [AUTOKAD] –≠–ª–µ–º–µ–Ω—Ç {i+1} —Å–∫–∞—á–∞–Ω")
                else:
                    logger.warning("‚ö†Ô∏è [AUTOKAD] PDF —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ querySelector")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [AUTOKAD] –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ querySelector: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ div.text (–∫–∞–∫ –≤ autoKad)
            logger.info("üîÑ [AUTOKAD] –ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ div.text")
            
            try:
                # JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                js_extract_text = """
                const textDiv = document.querySelector('div.text');
                if (textDiv) {
                    return {
                        found: true,
                        text: textDiv.textContent || textDiv.innerText,
                        length: (textDiv.textContent || textDiv.innerText).length
                    };
                }
                return { found: false };
                """
                
                text_result = self.driver.execute_script(js_extract_text)
                
                if text_result.get('found'):
                    logger.info(f"‚úÖ [AUTOKAD] –ù–∞–π–¥–µ–Ω div.text —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {text_result['length']} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ PDF –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    logger.info("üîç [AUTOKAD] –ü–æ–∏—Å–∫ PDF –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ç–µ–∫—Å—Ç–æ–º...")
                    
                    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å PDF
                    js_find_pdf_on_text_page = """
                    const pdfElements = [];
                    
                    // –ü–æ–∏—Å–∫ –≤ —Å—Å—ã–ª–∫–∞—Ö
                    document.querySelectorAll('a').forEach(a => {
                        const href = a.getAttribute('href');
                        if (href && (href.includes('.pdf') || href.includes('Document') || href.includes('Pdf'))) {
                            pdfElements.push({
                                type: 'link',
                                url: href.startsWith('http') ? href : 
                                     (href.startsWith('/') ? 'https://kad.arbitr.ru' + href : window.location.href),
                                text: a.textContent.trim()
                            });
                        }
                    });
                    
                    // –ü–æ–∏—Å–∫ –≤ embed —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    document.querySelectorAll('embed[type*="pdf"]').forEach(embed => {
                        const src = embed.getAttribute('src');
                        if (src) {
                            pdfElements.push({
                                type: 'embed',
                                url: src,
                                text: 'PDF Embed'
                            });
                        }
                    });
                    
                    // –ü–æ–∏—Å–∫ –≤ object —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    document.querySelectorAll('object[type*="pdf"]').forEach(obj => {
                        const data = obj.getAttribute('data');
                        if (data) {
                            pdfElements.push({
                                type: 'object',
                                url: data,
                                text: 'PDF Object'
                            });
                        }
                    });
                    
                    return pdfElements;
                    """
                    
                    pdf_elements = self.driver.execute_script(js_find_pdf_on_text_page)
                    
                    if pdf_elements:
                        logger.info(f"‚úÖ [AUTOKAD] –ù–∞–π–¥–µ–Ω–æ {len(pdf_elements)} PDF —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ç–µ–∫—Å—Ç–æ–º")
                        
                        for i, elem in enumerate(pdf_elements):
                            url = elem['url']
                            elem_type = elem['type']
                            
                            logger.info(f"üìÑ [AUTOKAD] –≠–ª–µ–º–µ–Ω—Ç {i+1} ({elem_type}): {url}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∏
                            if self._is_blacklisted_url(url):
                                continue
                            if not self._is_case_document_url(url):
                                continue
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ POST
                            files = self._download_pdf_via_post(url, f"autokad_text_page_{i+1}", "ALGORITHM_12")
                            if files:
                                downloaded_files.extend(files)
                                
                else:
                    logger.info("‚ÑπÔ∏è [AUTOKAD] div.text –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [AUTOKAD] –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ div.text: {e}")
            
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ URL (–µ—Å–ª–∏ —ç—Ç–æ PDF —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            logger.info("üîÑ [AUTOKAD] –ú–µ—Ç–æ–¥ 3: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ URL")
            
            try:
                current_url = self.driver.current_url
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π URL - —ç—Ç–æ PDF –¥–æ–∫—É–º–µ–Ω—Ç
                if '/Document/Pdf/' in current_url or current_url.endswith('.pdf'):
                    logger.info(f"‚úÖ [AUTOKAD] –¢–µ–∫—É—â–∏–π URL —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
                    logger.info(f"üîó [AUTOKAD] URL: {current_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏
                    if not self._is_blacklisted_url(current_url):
                        if self._is_case_document_url(current_url):
                            # –°–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ POST
                            files = self._download_pdf_via_post(current_url, "autokad_current_url", "ALGORITHM_12")
                            if files:
                                downloaded_files.extend(files)
                                logger.info(f"‚úÖ [AUTOKAD] –¢–µ–∫—É—â–∏–π URL —Å–∫–∞—á–∞–Ω")
                        else:
                            logger.debug("‚ö†Ô∏è [AUTOKAD] –¢–µ–∫—É—â–∏–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–µ–ª–∞")
                    else:
                        logger.warning("üö´ [AUTOKAD] –¢–µ–∫—É—â–∏–π URL –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                else:
                    logger.debug("‚ÑπÔ∏è [AUTOKAD] –¢–µ–∫—É—â–∏–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [AUTOKAD] –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ URL: {e}")
            
            # –ú–µ—Ç–æ–¥ 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ window.open –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            logger.info("üîÑ [AUTOKAD] –ú–µ—Ç–æ–¥ 4: window.open (–æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)")
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
                original_window = self.driver.current_window_handle
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ (–º–µ—Ç–æ–¥ –∏–∑ autoKad –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
                logger.info("ü™ü [AUTOKAD] –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ...")
                self.driver.execute_script("window.open('');")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                new_window = self.driver.window_handles[-1]
                self.driver.switch_to.window(new_window)
                logger.info("‚úÖ [AUTOKAD] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
                logger.info(f"üåê [AUTOKAD] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ: {page_url}")
                self.driver.get(page_url)
                time.sleep(5)
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ PDF –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                new_window_url = self.driver.current_url
                logger.info(f"üìç [AUTOKAD] URL –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ: {new_window_url}")
                
                if '/Document/Pdf/' in new_window_url or new_window_url.endswith('.pdf'):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                    if not self._is_blacklisted_url(new_window_url):
                        if self._is_case_document_url(new_window_url):
                            files = self._download_pdf_via_post(new_window_url, "autokad_new_window", "ALGORITHM_12")
                            if files:
                                downloaded_files.extend(files)
                                logger.info(f"‚úÖ [AUTOKAD] –°–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É
                logger.info("üîô [AUTOKAD] –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è...")
                self.driver.close()
                self.driver.switch_to.window(original_window)
                logger.info("‚úÖ [AUTOKAD] –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è [AUTOKAD] –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ window.open: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                try:
                    if len(self.driver.window_handles) > 1:
                        self.driver.switch_to.window(self.driver.window_handles[0])
                except:
                    pass
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if downloaded_files:
                logger.info("=" * 80)
                logger.info(f"üéâ [AUTOKAD] –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤:")
                for idx, fpath in enumerate(downloaded_files, 1):
                    logger.info(f"   {idx}. {os.path.basename(fpath)}")
                logger.info("=" * 80)
                return downloaded_files
            else:
                logger.warning("=" * 80)
                logger.warning("‚ö†Ô∏è [AUTOKAD] –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                logger.warning("=" * 80)
                return []
            
        except Exception as e:
            logger.error("=" * 80)
            logger.error(f"‚ùå [AUTOKAD] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ê–õ–ì–û–†–ò–¢–ú–ï 12: {e}")
            import traceback
            logger.error(f"Traceback:\n{traceback.format_exc()}")
            logger.error("=" * 80)
            return []
