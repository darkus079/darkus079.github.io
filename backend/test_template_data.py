#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –≤ —à–∞–±–ª–æ–Ω result.html
"""

import os
from fastapi.testclient import TestClient
from app import app, FILES_DIR

def test_template_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ —à–∞–±–ª–æ–Ω"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = [
        "–ê84-4753_2024_20251006_104451_1_test1.pdf",
        "–ê84-4753_2024_20251006_104451_2_test2.pdf"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(FILES_DIR, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    for filename in test_files:
        file_path = os.path.join(FILES_DIR, filename)
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(f"Test PDF content for {filename}")
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é TestClient
    client = TestClient(app)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ POST –∑–∞–ø—Ä–æ—Å
    print("\nüîç –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    response = client.get("/api/files")
    if response.status_code == 200:
        data = response.json()
        print(f"üìÅ –§–∞–π–ª—ã –≤ API: {data}")
        
        if 'files' in data and len(data['files']) > 0:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            for filename in data['files']:
                print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
                print(f"üìÑ –¢–∏–ø: {type(filename)}")
                
                import urllib.parse
                encoded_filename = urllib.parse.quote(filename)
                download_url = f"/api/download/{encoded_filename}"
                
                print(f"üîó URL: {download_url}")
                
                response = client.get(download_url)
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.text}")
        else:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
        return False
    
    return True

def test_template_rendering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞...")
    
    from fastapi.templating import Jinja2Templates
    from fastapi import Request
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "success": True,
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "files": [
            "–ê84-4753_2024_20251006_104451_1_test1.pdf",
            "–ê84-4753_2024_20251006_104451_2_test2.pdf"
        ],
        "case_number": "–ê84-4753/2024"
    }
    
    status_data = {
        "is_parsing": False,
        "current_case": "",
        "progress": ""
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π request
    request = Request(scope={"type": "http", "method": "GET"})
    
    # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
    templates = Jinja2Templates(directory="templates")
    
    try:
        response = templates.TemplateResponse("result.html", {
            "request": request,
            "result": test_data,
            "status": status_data
        })
        
        print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = response.body.decode('utf-8')
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        import re
        download_links = re.findall(r'href="/api/download/([^"]+)"', content)
        print(f"üîó –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {download_links}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç [object Object]
        if '[object Object]' in content:
            print("‚ùå –ù–∞–π–¥–µ–Ω [object Object] –≤ —à–∞–±–ª–æ–Ω–µ!")
            return False
        else:
            print("‚úÖ [object Object] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —à–∞–±–ª–æ–Ω–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        return False

def cleanup_test_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    test_files = [
        "–ê84-4753_2024_20251006_104451_1_test1.pdf",
        "–ê84-4753_2024_20251006_104451_2_test2.pdf"
    ]
    
    for filename in test_files:
        file_path = os.path.join(FILES_DIR, filename)
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞\n")
    
    # –¢–µ—Å—Ç 1: –î–∞–Ω–Ω—ã–µ API
    success1 = test_template_data()
    
    # –¢–µ—Å—Ç 2: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
    success2 = test_template_rendering()
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_test_files()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ API: {'–ü–†–û–ô–î–ï–ù' if success1 else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞: {'–ü–†–û–ô–î–ï–ù' if success2 else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
