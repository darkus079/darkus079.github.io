#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import os
import logging
from parser_simplified import KadArbitrParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = os.path.join("files", "test_api_document.pdf")
    os.makedirs("files", exist_ok=True)
    
    with open(test_file, "w") as f:
        f.write("Test PDF content for API")
    
    logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = KadArbitrParser()
    files = parser.get_downloaded_files()
    
    logger.info(f"üìÅ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω
    test_found = any("test_api_document.pdf" in file_path for file_path in files)
    
    if test_found:
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        for file_path in files:
            if "test_api_document.pdf" in file_path:
                if os.path.exists(file_path):
                    file_size = os.path.getsize(file_path)
                    logger.info(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path} ({file_size} –±–∞–π—Ç)")
                else:
                    logger.warning(f"   ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
    else:
        logger.warning("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä—Å–µ—Ä–æ–º")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists(test_file):
        os.remove(test_file)
        logger.info("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    
    logger.info("‚úÖ –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_file_download_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –≤–∫–ª–∞–¥–æ–∫"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_files = [
        "test_document_1.pdf",
        "test_document_2.pdf",
        "test_document_3.pdf"
    ]
    
    os.makedirs("files", exist_ok=True)
    
    for filename in test_files:
        file_path = os.path.join("files", filename)
        with open(file_path, "w") as f:
            f.write(f"Test PDF content for {filename}")
        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = KadArbitrParser()
    files = parser.get_downloaded_files()
    
    logger.info(f"üìÅ –ü–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã
    found_files = []
    for file_path in files:
        filename = os.path.basename(file_path)
        if filename in test_files:
            found_files.append(filename)
            logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω: {filename}")
    
    if len(found_files) == len(test_files):
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(found_files)} –∏–∑ {len(test_files)} —Ñ–∞–π–ª–æ–≤")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    for filename in test_files:
        file_path = os.path.join("files", filename)
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {filename}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_api_endpoints()
    test_file_download_simulation()
