#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å [object Object] –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import tempfile
import shutil
from fastapi.testclient import TestClient
from app import app

def test_api_files_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç API /api/files"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API /api/files...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_filename = "test_debug_file.pdf"
    test_file_path = os.path.join("files", test_filename)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("files", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(test_file_path, "w", encoding="utf-8") as f:
        f.write("Test PDF content for debug")
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é TestClient
    client = TestClient(app)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/files
    response = client.get("/api/files")
    print(f"üìä –°—Ç–∞—Ç—É—Å /api/files: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"üìÅ –û—Ç–≤–µ—Ç API: {data}")
        print(f"üìÅ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(data)}")
        print(f"üìÅ –ö–ª—é—á–∏: {data.keys() if isinstance(data, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
        
        if 'files' in data:
            files = data['files']
            print(f"üìÅ –§–∞–π–ª—ã: {files}")
            print(f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–æ–≤: {type(files)}")
            print(f"üìÅ –î–ª–∏–Ω–∞ —Ñ–∞–π–ª–æ–≤: {len(files) if isinstance(files, list) else '–ù–µ —Å–ø–∏—Å–æ–∫'}")
            
            if isinstance(files, list) and len(files) > 0:
                print(f"üìÅ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª: {files[0]}")
                print(f"üìÅ –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {type(files[0])}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                if test_filename in files:
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                    
                    import urllib.parse
                    encoded_filename = urllib.parse.quote(test_filename)
                    download_url = f"/api/download/{encoded_filename}"
                    
                    print(f"üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
                    
                    response = client.get(download_url)
                    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                    
                    if response.status_code == 200:
                        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
                        print(f"üìÅ Content-Type: {response.headers.get('content-type')}")
                        print(f"üìÅ Content-Disposition: {response.headers.get('content-disposition')}")
                        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
                else:
                    print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            else:
                print(f"‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
        else:
            print(f"‚ùå –ö–ª—é—á 'files' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists(test_file_path):
        os.remove(test_file_path)
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    
    return response.status_code == 200

def test_backend_client_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É backend-client.js"""
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã backend-client.js...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_filename = "test_backend_client.pdf"
    test_file_path = os.path.join("files", test_filename)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("files", exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(test_file_path, "w", encoding="utf-8") as f:
        f.write("Test PDF content for backend client simulation")
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_filename}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É backend-client.js
    client = TestClient(app)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –≤ getFilesList())
    response = client.get("/api/files")
    print(f"üìä –°—Ç–∞—Ç—É—Å /api/files: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"üìÅ –î–∞–Ω–Ω—ã–µ –æ—Ç API: {data}")
        
        # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π frontend (–∫–∞–∫ –≤ getFilesList())
        files = [{
            'name': fileName,
            'size': 0,  # –†–∞–∑–º–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API
            'url': f"http://127.0.0.1:8000/api/download/{fileName}",
            'created': "2025-10-03T18:00:00.000Z",
            'modified': "2025-10-03T18:00:00.000Z"
        } for fileName in data['files']]
        
        print(f"üìÅ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files}")
        print(f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–æ–≤: {type(files)}")
        print(f"üìÅ –î–ª–∏–Ω–∞ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        
        if len(files) > 0:
            first_file = files[0]
            print(f"üìÅ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª: {first_file}")
            print(f"üìÅ –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {type(first_file)}")
            print(f"üìÅ –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {first_file.keys() if isinstance(first_file, dict) else '–ù–µ —Å–ª–æ–≤–∞—Ä—å'}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if isinstance(first_file, dict) and 'name' in first_file and 'url' in first_file:
                print("‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                print(f"   name: {first_file['name']} (—Ç–∏–ø: {type(first_file['name'])})")
                print(f"   url: {first_file['url']} (—Ç–∏–ø: {type(first_file['url'])})")
                
                # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
                import urllib.parse
                encoded_filename = urllib.parse.quote(first_file['name'])
                download_url = f"/api/download/{encoded_filename}"
                
                print(f"üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
                
                response = client.get(download_url)
                print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                
                if response.status_code == 200:
                    print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        else:
            print("‚ùå –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists(test_file_path):
        os.remove(test_file_path)
        print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    
    return response.status_code == 200

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å [object Object]\n")
    
    # –¢–µ—Å—Ç 1: –û—Ç–≤–µ—Ç API /api/files
    success1 = test_api_files_response()
    
    # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è backend-client.js
    success2 = test_backend_client_simulation()
    
    if success1 and success2:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Å [object Object] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ—à–µ–Ω–∞!")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
