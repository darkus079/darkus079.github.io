import os
import time
import logging
import requests
import shutil
import random
import re
import json
import signal
import sys
import threading
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException
import urllib3
import undetected_chromedriver as uc
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import shutil
import platform
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import tempfile
import glob
from pdf_extraction_algorithms import PDFExtractionAlgorithms

UC_AVAILABLE = True

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s', 
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

class KadArbitrParser:
    def __init__(self):
        self.driver = None
        self.files_dir = "files"
        self.downloads_dir = self._get_downloads_directory()
        self.is_processing = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        self._force_stop = False  # –§–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._ensure_files_directory()
        self._signal_handlers_setup = False
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {self.downloads_dir}")
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {os.path.abspath(self.files_dir)}")
    
    def _get_downloads_directory(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ó–∞–≥—Ä—É–∑–∫–∏"""
        try:
            # –î–ª—è Windows
            if platform.system() == "Windows":
                downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
                if os.path.exists(downloads_path):
                    return downloads_path
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
                downloads_path = os.path.join(os.path.expanduser("~"), "–ó–∞–≥—Ä—É–∑–∫–∏")
                if os.path.exists(downloads_path):
                    return downloads_path
            # –î–ª—è Linux/Mac
            else:
                downloads_path = os.path.join(os.path.expanduser("~"), "Downloads")
                if os.path.exists(downloads_path):
                    return downloads_path
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
            logger.warning("‚ö†Ô∏è –ü–∞–ø–∫–∞ –ó–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É")
            return os.getcwd()
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ó–∞–≥—Ä—É–∑–∫–∞–º: {e}")
            return os.getcwd()
    
    def _ensure_files_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        if not os.path.exists(self.files_dir):
            os.makedirs(self.files_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {self.files_dir}")
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if threading.current_thread() is not threading.main_thread():
            logger.debug("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –Ω–µ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫")
            return
        
        if self._signal_handlers_setup:
            return
            
        def signal_handler(signum, frame):
            logger.info("üõë –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï (Ctrl+C)")
            logger.info("üîÑ –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í...")
            
            # –°–†–ê–ó–£ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
            self.is_processing = False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self._force_stop = True
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º WebDriver
            if self.driver:
                try:
                    self.driver.quit()
                    logger.info("‚úÖ WebDriver –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebDriver: {e}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            logger.info("üèÅ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–ê–†–°–ï–†–ê")
            os._exit(0)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
            signal.signal(signal.SIGTERM, signal_handler)  # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self._signal_handlers_setup = True
            logger.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def cleanup_files_directory(self):
        """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É files"""
        if os.path.exists(self.files_dir):
            shutil.rmtree(self.files_dir)
        os.makedirs(self.files_dir)
        logger.info("–ü–∞–ø–∫–∞ files –æ—á–∏—â–µ–Ω–∞")
    
    def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WebDriver —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ fallback –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        
        # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        init_methods = [
            ("undetected-chromedriver", self._init_undetected_driver),
            ("Chrome —Å WebDriverManager", self._init_chrome_webdriver_manager),
            ("Chrome —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞", self._init_chrome_clean_cache), 
            ("Chrome —Å–∏—Å—Ç–µ–º–Ω—ã–π", self._init_chrome_system),
            ("Chrome –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π", self._init_chrome_minimal)
        ]
        
        for method_name, method_func in init_methods:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {method_name}")
                if method_func():
                    logger.info(f"‚úÖ WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥–æ–º: {method_name}")
                    return True
                else:
                    logger.warning(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ {method_name}: {e}")
                continue
        
        logger.error("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return False
    
    def _init_undetected_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å undetected-chromedriver –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—Ö–æ–¥–æ–º –∑–∞—â–∏—Ç—ã"""
        if not UC_AVAILABLE:
            logger.warning("‚ö†Ô∏è undetected-chromedriver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –º–µ—Ç–æ–¥")
            return False
            
        try:
            logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            options = uc.ChromeOptions()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--start-maximized')
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            options.add_argument('--disable-ipc-flooding-protection')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-client-side-phishing-detection')
            options.add_argument('--disable-sync')
            options.add_argument('--disable-translate')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-renderer-backgrounding')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
            options.add_argument('--timeout=30000')
            options.add_argument('--page-load-strategy=normal')
            
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            options.add_argument('--disable-extensions-file-access-check')
            options.add_argument('--disable-extensions-http-throttling')
            options.add_argument('--disable-extensions-except=*')
            options.add_argument('--aggressive-cache-discard')
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-client-side-phishing-detection')
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "profile.managed_default_content_settings.images": 1,
                "profile.default_content_setting_values.geolocation": 2,
                "credentials_enable_service": False,
                "profile.password_manager_enabled": False,
                "profile.default_content_setting_values.media_stream_mic": 2,
                "profile.default_content_setting_values.media_stream_camera": 2,
                "intl.accept_languages": "ru-RU,ru,en-US,en",
                "profile.default_content_settings.site_engagement": {
                    "https://kad.arbitr.ru": {"last_engagement_time": time.time()}
                },
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                "download.default_directory": self.downloads_dir,
                "download.prompt_for_download": False,
                "download.directory_upgrade": True,
                "safebrowsing.enabled": True
            }
            options.add_experimental_option("prefs", prefs)
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = uc.Chrome(options=options, version_main=None)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                "userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.6843.82 Safari/537.36'
            })
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Ä–∞–Ω–∞
            self.driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', {
                'mobile': False,
                'width': 1920,
                'height': 1080,
                'deviceScaleFactor': 1,
            })
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            self.driver.execute_script("""
                // –£–¥–∞–ª—è–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                delete navigator.__proto__.webdriver;
                
                // –ú–∞—Å–∫–∏—Ä—É–µ–º Chrome runtime
                window.chrome = {
                    runtime: {},
                    loadTimes: function() {},
                    csi: function() {},
                    app: {}
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['ru-RU', 'ru', 'en-US', 'en']
                });
                
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5] // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
                });
            """)
            
            logger.info("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except ImportError:
            logger.info("undetected-chromedriver –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def _init_chrome_webdriver_manager(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å WebDriverManager –∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:            
            logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
            
            options = Options()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-gpu')
            options.add_argument('--remote-debugging-port=9222')
            options.add_argument('--disable-web-security')
            options.add_argument('--disable-features=VizDisplayCompositor')
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            options.add_argument('--disable-background-timer-throttling')
            options.add_argument('--disable-renderer-backgrounding')
            options.add_argument('--disable-backgrounding-occluded-windows')
            options.add_argument('--disable-client-side-phishing-detection')
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "profile.managed_default_content_settings.images": 1,
                "credentials_enable_service": False,
                "profile.password_manager_enabled": False,
                "intl.accept_languages": "ru-RU,ru,en-US,en",
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                "download.default_directory": self.downloads_dir,
                "download.prompt_for_download": False,
                "download.directory_upgrade": True,
                "safebrowsing.enabled": True
            }
            options.add_experimental_option("prefs", prefs)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥—Ä–∞–π–≤–µ—Ä—É
            driver_path = ChromeDriverManager().install()
            logger.info(f"–ü—É—Ç—å –∫ –¥—Ä–∞–π–≤–µ—Ä—É: {driver_path}")
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            validated_path = self._validate_chromedriver(driver_path)
            if not validated_path:
                return False
            
            service = Service(validated_path)
            self.driver = webdriver.Chrome(service=service, options=options)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            try:
                self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                    "userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.6843.82 Safari/537.36'
                })
            except Exception as script_error:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {script_error}")
            
            logger.info("‚úÖ –û–±—ã—á–Ω—ã–π Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥–æ—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ WebDriverManager: {e}")
            return False
    
    def _init_chrome_clean_cache(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞ WebDriverManager"""
        try:
            try:
                system = platform.system().lower()
                
                cache_dirs = []
                if system == "windows":
                    # Windows - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É—Ç–∏ –∫—ç—à–∞ WebDriverManager
                    cache_dirs = [
                        os.path.expanduser("~/.wdm"),
                        os.path.join(os.path.expanduser("~"), ".wdm"),
                        os.path.join(os.path.expanduser("~"), "AppData", "Local", ".wdm"),
                        os.path.join(os.getenv("USERPROFILE", ""), ".wdm")
                    ]
                else:
                    # Linux/Mac
                    cache_dirs = [
                        os.path.expanduser("~/.wdm"),
                        os.path.join(os.path.expanduser("~"), ".cache", "wdm")
                    ]
                
                for cache_dir in cache_dirs:
                    if cache_dir and os.path.exists(cache_dir):
                        shutil.rmtree(cache_dir)
                        logger.info(f"–ö—ç—à WebDriverManager –æ—á–∏—â–µ–Ω: {cache_dir}")
                        
            except Exception as cache_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: {cache_error}")
            
            logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞ –∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
            
            options = Options()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-gpu')
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "credentials_enable_service": False,
                "profile.password_manager_enabled": False,
                "intl.accept_languages": "ru-RU,ru,en-US,en",
            }
            options.add_experimental_option("prefs", prefs)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä
            driver_path = ChromeDriverManager().install()
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            validated_path = self._validate_chromedriver(driver_path)
            if not validated_path:
                return False
                
            service = Service(validated_path)
            self.driver = webdriver.Chrome(service=service, options=options)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            try:
                self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                self.driver.execute_cdp_cmd('Network.setUserAgentOverride', {
                    "userAgent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.6843.82 Safari/537.36'
                })
            except Exception as script_error:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {script_error}")
            
            logger.info("‚úÖ Chrome —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞ –≥–æ—Ç–æ–≤")
            return True
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞: {e}")
            return False
    
    def _init_chrome_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º Chrome –±–µ–∑ WebDriverManager"""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ Chrome —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç —Ñ—É–Ω–∫—Ü–∏—è–º–∏...")
            
            options = Options()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-gpu')
            
            # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "credentials_enable_service": False,
                "profile.password_manager_enabled": False,
                "intl.accept_languages": "ru-RU,ru,en-US,en",
            }
            options.add_experimental_option("prefs", prefs)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π chromedriver
            self.driver = webdriver.Chrome(options=options)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            try:
                self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            except Exception as script_error:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: {script_error}")
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π Chrome –≥–æ—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.warning(f"–°–∏—Å—Ç–µ–º–Ω—ã–π Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return False
    
    def _init_chrome_minimal(self):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å)"""
        try:
            logger.info("üö® –ü–æ–ø—ã—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome...")
            
            options = webdriver.ChromeOptions()
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ headless —Ä–µ–∂–∏–º–∞ —Å–Ω–∞—á–∞–ª–∞
            try:
                options.add_argument('--window-size=1280,720')
                self.driver = webdriver.Chrome(options=options)
                logger.info("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—Å –æ–∫–Ω–æ–º)")
                return True
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º headless —Ä–µ–∂–∏–º
                logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ headless —Ä–µ–∂–∏–º...")
                options.add_argument('--headless')
                self.driver = webdriver.Chrome(options=options)
                logger.warning("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ headless —Ä–µ–∂–∏–º–µ")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return False
    
    def _validate_chromedriver(self, driver_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ chromedriver –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤–∞–ª–∏–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ chromedriver: {driver_path}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not os.path.exists(driver_path):
                logger.error(f"–§–∞–π–ª –¥—Ä–∞–π–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {driver_path}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (chromedriver –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1MB)
            file_size = os.path.getsize(driver_path)
            logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {file_size} –±–∞–π—Ç")
            
            if file_size < 1000000:  # –ú–µ–Ω–µ–µ 1MB
                logger.error(f"–§–∞–π–ª –¥—Ä–∞–π–≤–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è Windows
            if platform.system().lower() == "windows":
                if not driver_path.lower().endswith('.exe'):
                    logger.warning(f"–§–∞–π–ª –¥—Ä–∞–π–≤–µ—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .exe: {driver_path}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
                    driver_dir = os.path.dirname(driver_path)
                    for file in os.listdir(driver_dir):
                        if file.lower().startswith('chromedriver') and file.lower().endswith('.exe'):
                            correct_path = os.path.join(driver_dir, file)
                            logger.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chromedriver: {correct_path}")
                            return self._validate_chromedriver(correct_path)
                    
                    logger.error("–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, THIRD_PARTY_NOTICES)
            try:
                with open(driver_path, 'rb') as f:
                    header = f.read(10)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ —Å —Ç–µ–∫—Å—Ç–∞
                    if header.startswith(b'MZ'):  # PE –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Windows exe
                        logger.info("–ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π PE –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (Windows)")
                        return driver_path
                    elif header.startswith(b'\x7fELF'):  # ELF –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Linux
                        logger.info("–ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π ELF –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª (Linux)")
                        return driver_path
                    elif not header.decode('utf-8', errors='ignore').isprintable():
                        logger.info("–ù–∞–π–¥–µ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª")
                        return driver_path
                    else:
                        logger.error(f"–§–∞–π–ª –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –∞ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: {header}")
                        return None
                        
            except Exception as read_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞: {read_error}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å, —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
                return driver_path
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ chromedriver: {e}")
            return None
    
    def _human_delay(self, min_seconds=1, max_seconds=3, description=""):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ"""
        delay_time = random.uniform(min_seconds, max_seconds)
        if description:
            logger.info(f"‚è±Ô∏è {description}: {delay_time:.1f}—Å")
        else:
            logger.debug(f"‚è±Ô∏è –ü–∞—É–∑–∞: {delay_time:.1f}—Å")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Ctrl+C
        start_time = time.time()
        while time.time() - start_time < delay_time:
            if self.is_processing == False:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.info("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                raise KeyboardInterrupt("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
    
    def _human_type(self, element, text, delay_range=(0.05, 0.15)):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        logger.info(f"‚å®Ô∏è –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥: {text}")
        
        # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö (–∫–∞–∫ –ª—é–¥–∏)
        if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            wrong_char = random.choice('qwertyuiop')
            element.send_keys(wrong_char)
            self._human_delay(0.2, 0.5, "–æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É")
            element.send_keys(Keys.BACKSPACE)
            self._human_delay(0.1, 0.3, "–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É")
        
        # –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        for i, char in enumerate(text):
            element.send_keys(char)
            
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—É–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
            if char.isdigit():
                delay = random.uniform(0.03, 0.08)  # –¶–∏—Ñ—Ä—ã –±—ã—Å—Ç—Ä–µ–µ
            elif char.isalpha():
                delay = random.uniform(delay_range[0], delay_range[1])  # –ë—É–∫–≤—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
            elif char in '-/\\':
                delay = random.uniform(0.1, 0.2)  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            else:
                delay = random.uniform(0.05, 0.12)
            
            time.sleep(delay)
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–±–æ–ª—å—à–∏–µ –ø–∞—É–∑—ã (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–º–∞–µ–º)
            if i > 0 and random.random() < 0.15:  # 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã
                self._human_delay(0.1, 0.4, "–ø–∞—É–∑–∞ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞")
        
        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª–∏)
        self._human_delay(0.3, 0.8, "–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    
    def _human_scroll(self, direction="down", amount="small"):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if direction == "up":
                scroll_value = -300 if amount == "small" else -600
            else:
                scroll_value = 300 if amount == "small" else 600
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
            scroll_value += random.randint(-50, 50)
            
            logger.debug(f"üñ±Ô∏è –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {direction} –Ω–∞ {scroll_value}px")
            self.driver.execute_script(f"window.scrollBy(0, {scroll_value});")
            self._human_delay(0.5, 1.5, "–ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")
    
    def _human_mouse_move(self, element=None, random_movement=True):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏"""
        try:
            actions = ActionChains(self.driver)
            
            if random_movement:
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
                for _ in range(random.randint(1, 3)):
                    x_offset = random.randint(-100, 100)
                    y_offset = random.randint(-50, 50)
                    actions.move_by_offset(x_offset, y_offset)
                    actions.pause(random.uniform(0.1, 0.3))
                
                # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
                actions.move_by_offset(0, 0)
            
            if element:
                # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                actions.move_to_element(element)
                actions.pause(random.uniform(0.2, 0.5))
            
            actions.perform()
            logger.debug("üñ±Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
    
    def _simulate_human_reading(self, seconds_range=(2, 5)):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        read_time = random.uniform(seconds_range[0], seconds_range[1])
        logger.info(f"üëÅÔ∏è –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {read_time:.1f}—Å")
        
        # –í–æ –≤—Ä–µ–º—è "—á—Ç–µ–Ω–∏—è" –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        start_time = time.time()
        while time.time() - start_time < read_time:
            if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                self._human_scroll("down", "small")
            time.sleep(random.uniform(0.5, 1.0))
    
    def _setup_realistic_session(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ cookies
            realistic_cookies = [
                {"name": "session_start", "value": str(int(time.time()))},
                {"name": "timezone_offset", "value": str(-180)},  # MSK
                {"name": "screen_resolution", "value": "1920x1080"},
                {"name": "browser_language", "value": "ru-RU,ru;q=0.9,en;q=0.8"},
                {"name": "visit_count", "value": str(random.randint(1, 10))},
                {"name": "last_activity", "value": str(int(time.time() - random.randint(3600, 86400)))},
            ]
            
            for cookie in realistic_cookies:
                try:
                    self.driver.add_cookie(cookie)
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cookie {cookie['name']}: {e}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º localStorage –¥–∞–Ω–Ω—ã–µ
            localStorage_data = {
                "userPreferences": json.dumps({
                    "theme": "default",
                    "language": "ru",
                    "visited_pages": random.randint(1, 5)
                }),
                "sessionData": json.dumps({
                    "startTime": int(time.time()),
                    "actions": random.randint(1, 10)
                })
            }
            
            for key, value in localStorage_data.items():
                try:
                    self.driver.execute_script(f"localStorage.setItem('{key}', '{value}');")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å localStorage {key}: {e}")
            
            logger.info("‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    def _handle_anti_bot_measures(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –º–µ—Ä"""
        try:
            logger.info("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –º–µ—Ä...")
            
            # –ò—â–µ–º –∫–∞–ø—á—É
            captcha_selectors = [
                "iframe[src*='captcha']",
                ".captcha",
                "#captcha", 
                "[class*='captcha']",
                "iframe[src*='recaptcha']",
                ".g-recaptcha"
            ]
            
            for selector in captcha_selectors:
                try:
                    captcha_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                    if captcha_element.is_displayed():
                        logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ CAPTCHA! –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
                        logger.warning("ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–µ—à–∏—Ç–µ CAPTCHA –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏")
                        input(">>> –ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è CAPTCHA...")
                        return True
                except:
                    continue
            
            # –ò—â–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ IP
            blocking_indicators = [
                "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                "blocked",
                "access denied", 
                "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤",
                "too many requests",
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            ]
            
            page_text = self.driver.page_source.lower()
            for indicator in blocking_indicators:
                if indicator in page_text:
                    logger.error(f"üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {indicator}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            modal_selectors = [
                ".modal",
                "[class*='modal']",
                ".popup",
                "[class*='popup']",
                ".overlay",
                ".notification"
            ]
            
            for selector in modal_selectors:
                try:
                    modals = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for modal in modals:
                        if modal.is_displayed():
                            logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: {selector}")
                            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                            close_buttons = modal.find_elements(By.CSS_SELECTOR, 
                                "button, .close, [class*='close'], [onclick*='close']")
                            for btn in close_buttons:
                                if btn.is_displayed():
                                    self._human_mouse_move(btn)
                                    btn.click()
                                    self._human_delay(1, 2, "–ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞")
                                    logger.info("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                                    break
                except:
                    continue
            
            return True
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω—Ç–∏–±–æ—Ç –º–µ—Ä: {e}")
            return True
    
    def search_case(self, case_number):
        """–ò—â–µ—Ç –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º"""
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        if not self.is_processing:
            logger.warning("üõë –ü–ê–†–°–ï–† –û–°–¢–ê–ù–û–í–õ–ï–ù - –ø–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            return []
            
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –¥–µ–ª–∞: {case_number} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1})")
                
                # –≠–¢–ê–ü 1: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç —Å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
                target_url = "https://kad.arbitr.ru/"
                logger.info(f"üåê [NAVIGATION] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {target_url}")
                self.driver.get(target_url)
                logger.info(f"‚úÖ [NAVIGATION] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.driver.current_url}")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥–µ–ª–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—É—é –ø–∞—É–∑—É
                self._human_delay(2, 4, "–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–µ—Å—Å–∏—é
                self._setup_realistic_session()
                
                # –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–±–æ—Ç –º–µ—Ä
                if not self._handle_anti_bot_measures():
                    logger.error("üö´ –°–∞–π—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø")
                    return []
                
                # –≠–¢–ê–ü 3: –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                logger.info("üëÅÔ∏è –ò–∑—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                self._simulate_human_reading((3, 6))
                
                # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –º—ã—à–∏
                self._human_mouse_move(random_movement=True)
                
                # –≠–¢–ê–ü 4: –ü–æ–∏—Å–∫ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
                logger.info("üîç –ò—â–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –¥–µ–ª...")
                
                search_input = None
                input_selectors = [
                    "#sug-cases > div > input",
                    "#sug-cases input",
                    "#sug-cases div input",
                    "input[placeholder*='–Ω–æ–º–µ—Ä']",
                    "input[placeholder*='–¥–µ–ª']",
                    "input[name*='case']",
                    "input[id*='search']",
                    "input[type='text']:not([style*='display: none'])"
                ]
                
                for selector in input_selectors:
                    try:
                        search_input = WebDriverWait(self.driver, 8).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                        )
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞: {selector}")
                        break
                    except TimeoutException:
                        logger.debug(f"–ü–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {selector}")
                        continue
                
                if not search_input:
                    logger.error("‚ùå –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    try:
                        all_inputs = self.driver.find_elements(By.TAG_NAME, "input")
                        for inp in all_inputs:
                            if inp.is_displayed() and inp.is_enabled():
                                input_type = inp.get_attribute("type")
                                if input_type in ["text", "search", None]:
                                    search_input = inp
                                    logger.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
                                    break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è: {e}")
                    
                    if not search_input:
                        return []
                
                # –≠–¢–ê–ü 5: –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–æ–ª—é –ø–æ–∏—Å–∫–∞...")
                
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é
                self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", search_input)
                self._human_delay(1, 2, "–ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ–ª—é")
                
                # –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ –ø–æ–ª—é
                self._human_mouse_move(search_input)
                
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫
                try:
                    search_input.click()
                    logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ –ø–æ–ª—é –≤—ã–ø–æ–ª–Ω–µ–Ω")
                except Exception as e:
                    logger.warning(f"–û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}, –ø—Ä–æ–±—É–µ–º JavaScript")
                    self.driver.execute_script("arguments[0].click();", search_input)
                
                self._human_delay(0.5, 1.2, "–ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–ª—é")
                
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
                try:
                    current_value = search_input.get_attribute("value")
                    if current_value:
                        logger.info("üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç...")
                        search_input.clear()
                        self._human_delay(0.3, 0.8, "–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è: {e}")
                
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–µ–ª–∞
                logger.info("‚å®Ô∏è –í–≤–æ–¥–∏–º –Ω–æ–º–µ—Ä –¥–µ–ª–∞ —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–æ...")
                self._human_type(search_input, case_number, delay_range=(0.08, 0.18))
                
                # –≠–¢–ê–ü 6: –ü–æ–∏—Å–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
                logger.info("üîç –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞...")
                
                search_button = None
                button_selectors = [
                "#b-form-submit > div > button",
                "#b-form-submit button",
                "#b-form-submit",
                "button[type='submit']",
                "input[type='submit']",
                "button:contains('–ù–∞–π—Ç–∏')",
                "input[value*='–ù–∞–π—Ç–∏']",
                "[onclick*='search']",
                ".search-button",
                "[class*='search'] button"
            ]
            
                for selector in button_selectors:
                    try:
                        if ":contains(" in selector:
                            # XPath —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                            xpath = f"//button[contains(text(), '–ù–∞–π—Ç–∏')] | //input[@value='–ù–∞–π—Ç–∏'] | //button[contains(@value, '–ù–∞–π—Ç–∏')]"
                            search_button = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, xpath))
                            )
                        else:
                            search_button = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                            )
                        
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞: {selector}")
                        break
                        
                    except TimeoutException:
                        logger.debug(f"–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {selector}")
                        continue
                
                if not search_button:
                    logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    logger.info("‚å®Ô∏è –ü—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞...")
                    try:
                        search_input.send_keys(Keys.RETURN)
                        logger.info("‚úÖ Enter –Ω–∞–∂–∞—Ç")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Enter: {e}")
                        return []
                else:
                    # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
                    logger.info("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞...")
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–Ω–æ–ø–∫–µ
                    self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", search_button)
                    self._human_delay(1, 2, "–ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∫–Ω–æ–ø–∫–µ")
                    
                    # –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫ –∫–Ω–æ–ø–∫–µ
                    self._human_mouse_move(search_button)
                    
                    # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–ª–∏–∫–∞
                    click_success = False
                    for attempt in range(3):
                        try:
                            logger.info(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ #{attempt + 1}")
                            
                            if attempt == 0:
                                # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
                                search_button.click()
                            elif attempt == 1:
                                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - ActionChains
                                ActionChains(self.driver).move_to_element(search_button).click().perform()
                            else:
                                # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ - JavaScript
                                self.driver.execute_script("arguments[0].click();", search_button)
                            
                            logger.info("‚úÖ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            click_success = True
                            break
                        
                        except Exception as e:
                            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ #{attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                            self._human_delay(1, 2, f"–ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π #{attempt + 2}")
                            continue
                
                if not click_success:
                    logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å")
                    return []
                
                # –≠–¢–ê–ü 7: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...")
                self._human_delay(3, 6, "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
                search_executed = False
                for check_attempt in range(5):  # 5 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
                    try:
                        # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á—Ç–æ –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
                        result_indicators = [
                            "#b-cases",
                            ".search-results", 
                            "[class*='result']",
                            "#main-column1",
                            ".b-found-total"
                        ]
                        
                        for indicator in result_indicators:
                            try:
                                result_element = self.driver.find_element(By.CSS_SELECTOR, indicator)
                                if result_element.is_displayed():
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {indicator}")
                                    search_executed = True
                                    break
                            except NoSuchElementException:
                                continue
                        
                        if search_executed:
                            break
                        
                        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ #{check_attempt + 1}/5...")
                        self._human_delay(2, 4, "–º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                        continue
                
                if not search_executed:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
                    # –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                
                # –≠–¢–ê–ü 8: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                logger.info("üìä –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞...")
                
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                self._simulate_human_reading((2, 4))
                
                case_links = []
                result_selectors = [
                    "#b-cases > tbody > tr > td.num > div > a",
                    "#b-cases tbody tr td.num a",
                    "#b-cases a[href*='card']",
                    ".search-results a[href*='card']",
                    "table a[href*='card']",
                    "a[href*='Kad/Card']"
                ]
                
                for selector in result_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        if elements:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                            for element in elements:
                                try:
                                    url = element.get_attribute('href')
                                    text = element.text.strip()
                                    if url and text:
                                        case_links.append((url, text))
                                        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–µ–ª–æ: {text}")
                                except Exception as e:
                                    logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                                    continue
                            break
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                        continue
                
                # –≠–¢–ê–ü 9: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if case_links:
                    logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ {len(case_links)} –¥–µ–ª")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞" —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    self._human_delay(2, 4, "–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–µ–ª")
                    
                    return case_links
                else:
                    logger.warning("‚ùå –î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    not_found_indicators = [
                        "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 
                        "—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç",
                        "no results",
                        "not found"
                    ]
                    
                    page_text = self.driver.page_source.lower()
                    for indicator in not_found_indicators:
                        if indicator in page_text:
                            logger.info(f"‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: '{indicator}'")
                            break
                    
                    return []
                    
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C) –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞")
                return []
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}): {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å WebDriver
                if "HTTPConnectionPool" in str(e) or "Failed to establish" in str(e):
                    logger.warning("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebDriver, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥—Ä–∞–π–≤–µ—Ä
                    try:
                        if self.driver:
                            self.driver.quit()
                    except:
                        pass
                    self.driver = None
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    if self.init_driver():
                        logger.info("‚úÖ WebDriver –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        retry_count += 1
                        continue
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å WebDriver")
                        return []
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    retry_count += 1
                    if retry_count < max_retries:
                        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É {retry_count + 1}/{max_retries}...")
                        self._human_delay(3, 5, "–ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                        continue
                    else:
                        logger.error("‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞")
                        return []
        
        logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–µ–ª–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return []
    
    def download_pdf_files(self, case_url, case_number):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª—ã –∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–ª–∞"""
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if not self.is_processing:
            logger.warning("üõë –ü–ê–†–°–ï–† –û–°–¢–ê–ù–û–í–õ–ï–ù - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return []
            
        downloaded_files = []
        total_documents = 0
        successful_downloads = 0
        
        try:
            logger.info(f"üåê [NAVIGATION] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–ª—É: {case_url}")
            self.driver.get(case_url)
            logger.info(f"‚úÖ [NAVIGATION] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–ª–∞: {self.driver.current_url}")
            time.sleep(3)
            
            # –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            try:
                electronic_tab = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 
                        "#main-column > div.b-case-card-content.js-case-card-content > div > div.b-case-chrono > div.b-case-chrono-header > div > div:nth-child(2) > div.b-case-chrono-button.js-case-chrono-button.js-case-chrono-button--ed > div.b-case-chrono-button-text"))
                )
                electronic_tab.click()
                logger.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ'")
                time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            except TimeoutException:
                logger.warning("‚ùå –í–∫–ª–∞–¥–∫–∞ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return downloaded_files
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "#chrono_ed_content > ul"))
                )
                logger.info("‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except TimeoutException:
                logger.warning("‚ùå –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
                return downloaded_files
            
            # –ò—â–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
            document_elements = self.driver.find_elements(By.CSS_SELECTOR, "#chrono_ed_content > ul > li")
            total_documents = len(document_elements)
            
            if not document_elements:
                logger.warning("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–ø–∏—Å–∫–µ")
                return downloaded_files
            
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {total_documents} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            max_documents = min(total_documents, 5)  # –ú–∞–∫—Å–∏–º—É–º 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if total_documents > max_documents:
                logger.warning(f"üõë –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {max_documents} –∏–∑ {total_documents} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, doc_element in enumerate(document_elements[:max_documents], 1):
                try:
                    link_element = doc_element.find_element(By.CSS_SELECTOR, "a")
                    link_url = link_element.get_attribute('href')
                    link_text = link_element.text.strip()
                    logger.info(f"üîç –î–æ–∫—É–º–µ–Ω—Ç {i}: {link_text} -> {link_url}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ {i}: {e}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            for i, doc_element in enumerate(document_elements, 1):
                # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                if not self.is_processing:
                    logger.warning("üõë –ü–ê–†–°–ï–† –û–°–¢–ê–ù–û–í–õ–ï–ù - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                    break
                    
                try:
                    logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}/{total_documents}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    date_element = doc_element.find_element(By.CSS_SELECTOR, "p.b-case-chrono-ed-item-date")
                    date_text = date_element.text.strip()
                    logger.info(f"üìÖ –î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {date_text}")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ dd.mm.yyyy –≤ yyyy-mm-dd
                    try:
                        parsed_date = datetime.strptime(date_text, "%d.%m.%Y")
                        formatted_date = parsed_date.strftime("%Y-%m-%d")
                        logger.info(f"üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {formatted_date}")
                    except ValueError as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_text}': {e}")
                        formatted_date = f"unknown_date_{i}"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ PDF
                    pdf_link_element = doc_element.find_element(By.CSS_SELECTOR, "a")
                    pdf_url = pdf_link_element.get_attribute('href')
                    doc_title = pdf_link_element.text.strip() or f"document_{i}"
                    
                    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    doc_title = re.sub(r'\s+', ' ', doc_title).strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if not pdf_url:
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}")
                        continue
                    
                    logger.info(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ PDF: {pdf_url}")
                    logger.info(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∞–ª–∏–¥–Ω–∞
                    if not pdf_url.startswith('http'):
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}: {pdf_url}")
                        continue
                    
                    logger.info(f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {pdf_url}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π
                    safe_case_number = case_number.replace('/', '_').replace('\\', '_')
                    base_filename = f"{formatted_date}_{safe_case_number}_{doc_title}"
                    # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    safe_filename = re.sub(r'[<>:"/\\|?*\n\r\t]', '_', base_filename)
                    filename = f"{safe_filename}.pdf"
                    
                    logger.info(f"üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}: {filename}")
                    
                    # –í–ê–ñ–ù–û: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
                    try:
                        logger.info(f"üåê [NAVIGATION] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        logger.info(f"üåê [NAVIGATION] –ü–ï–†–ï–•–û–î –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}/{total_documents}")
                        logger.info(f"üåê [NAVIGATION] URL: {pdf_url}")
                        logger.info(f"üåê [NAVIGATION] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        
                        self.driver.get(pdf_url)
                        
                        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ (5 —Å–µ–∫)...")
                        time.sleep(5)
                        
                        logger.info(f"‚úÖ [NAVIGATION] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                        logger.info(f"üìç [NAVIGATION] –¢–µ–∫—É—â–∏–π URL: {self.driver.current_url}")
                        
                        # –¢–ï–ü–ï–†–¨ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–∞ –≠–¢–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –í–°–ï–• –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}...")
                        pdf_extractor = PDFExtractionAlgorithms(self.driver, self.files_dir, self.downloads_dir)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –≠–¢–û–ì–û –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        result_files = pdf_extractor.run_all_algorithms(case_number)
                        
                        if result_files:
                            downloaded_files.extend(result_files)
                            successful_downloads += 1
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç {i} —á–µ—Ä–µ–∑ –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: {len(result_files)} —Ñ–∞–π–ª–æ–≤")
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç {i} —á–µ—Ä–µ–∑ –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        logger.info(f"üîô [NAVIGATION] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        logger.info(f"üîô [NAVIGATION] –í–û–ó–í–†–ê–¢ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ª–∞")
                        logger.info(f"üîô [NAVIGATION] URL: {case_url}")
                        logger.info(f"üîô [NAVIGATION] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                        
                        self.driver.get(case_url)
                        logger.info(f"‚úÖ [NAVIGATION] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–ª–∞: {self.driver.current_url}")
                        time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ª–∞
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ" —Å–Ω–æ–≤–∞
                        try:
                            electronic_tab = WebDriverWait(self.driver, 10).until(
                                EC.element_to_be_clickable((By.CSS_SELECTOR, 
                                    "#main-column > div.b-case-card-content.js-case-card-content > div > div.b-case-chrono > div.b-case-chrono-header > div > div:nth-child(2) > div.b-case-chrono-button.js-case-chrono-button.js-case-chrono-button--ed > div.b-case-chrono-button-text"))
                            )
                            electronic_tab.click()
                            time.sleep(2)
                            logger.info("‚úÖ –í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ'")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –¥–µ–ª–æ': {e}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        document_elements = self.driver.find_elements(By.CSS_SELECTOR, "#chrono_ed_content > ul > li")
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}: {e}")
                        logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç {i}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
                    time.sleep(1)
                    
                except NoSuchElementException as e:
                    logger.error(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}: {e}")
                    continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {i}: {e}")
                    continue
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"üìä –ò–¢–û–ì–ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø:")
            logger.info(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_documents}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {successful_downloads}")
            logger.info(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {total_documents - successful_downloads}")
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C) –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return downloaded_files
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
            # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebDriver
            try:
                if hasattr(self, 'driver') and self.driver:
                    self.driver.quit()
            except:
                pass
            self.driver = None
            logger.warning("üîÑ WebDriver –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏")
        
        return downloaded_files
            
    
    def ensure_driver_ready(self):
        """–£–°–¢–ê–†–ï–õ–û: WebDriver —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        logger.warning("‚ö†Ô∏è ensure_driver_ready() —É—Å—Ç–∞—Ä–µ–ª - WebDriver –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ parse_case()")
        return True
    
    def parse_case(self, case_number):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞ - –ù–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        self._setup_signal_handlers()
        
        # –ñ–ï–°–¢–ö–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ –∑–∞ —Ä–∞–∑
        if self.is_processing:
            logger.error("üõë –ü–ê–†–°–ï–† –£–ñ–ï –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
            return []
        
        # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        if hasattr(self, '_force_stop') and self._force_stop:
            logger.warning("üõë –ü–ê–†–°–ï–† –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù - –Ω–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return []
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.is_processing = True
        logger.info(f"üöÄ –ù–ê–ß–ê–õ–û –ü–ê–†–°–ò–ù–ì–ê: {case_number}")
        
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É files
        self.cleanup_files_directory()
        
        # –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebDriver
        logger.info("üîß –®–ê–ì 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver")
        if not self.init_driver():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver")
            return []
        
        try:
            # –®–ê–ì 2: –ò—â–µ–º –¥–µ–ª–æ
            logger.info("üîç –®–ê–ì 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –¥–µ–ª–∞")
            case_links = self.search_case(case_number)
            
            if not case_links:
                logger.error("‚ùå –î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            # –®–ê–ì 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Ñ–∞–π–ª—ã –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –¥–µ–ª—É
            logger.info("üìÅ –®–ê–ì 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
            case_url, case_text = case_links[0]
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–∞: {case_text}")
            
            downloaded_files = []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            logger.info("üîç –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF...")
            try:
                pdf_extractor = PDFExtractionAlgorithms(self.driver, self.files_dir)
                alternative_files = pdf_extractor.run_all_algorithms(case_number)
                downloaded_files.extend(alternative_files)
                logger.info(f"üìÑ –ù–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã: –Ω–∞–π–¥–µ–Ω–æ {len(alternative_files)} —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö: {e}")
            
            
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")
            return downloaded_files
            
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
            logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞...")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
            
        finally:
            # –®–ê–ì 4: –ó–ê–ö–†–´–í–ê–ï–ú WebDriver –ü–û–°–õ–ï –ö–ê–ñ–î–û–ô –û–ë–†–ê–ë–û–¢–ö–ò
            logger.info("üõë –®–ê–ì 4: –ó–ê–ö–†–´–¢–ò–ï WebDriver")
            try:
                if self.driver:
                    self.driver.quit()
                    logger.info("‚úÖ WebDriver –∑–∞–∫—Ä—ã—Ç")
                self.driver = None
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebDriver: {e}")
            
            # –°–ë–†–û–° –§–õ–ê–ì–ê –û–ë–†–ê–ë–û–¢–ö–ò
            self.is_processing = False
            logger.info("üèÅ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù - WebDriver –û–¢–ö–õ–Æ–ß–ï–ù - –§–õ–ê–ì –°–ë–†–û–®–ï–ù")
    
    def get_downloaded_files(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not os.path.exists(self.files_dir):
            return []
        
        files = []
        for filename in os.listdir(self.files_dir):
            if os.path.isfile(os.path.join(self.files_dir, filename)):
                files.append(filename)
        
        return sorted(files)
    

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç WebDriver"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("WebDriver –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebDriver: {e}")
