import asyncio
import os
import logging
from contextlib import asynccontextmanager
from typing import List
import uvicorn    
from fastapi import FastAPI, HTTPException, BackgroundTasks, Request, Form
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel

from parser_simplified import KadArbitrParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = None
# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
parsing_semaphore = asyncio.Semaphore(1)
# –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
parsing_status = {"is_parsing": False, "current_case": "", "progress": ""}

class ParseRequest(BaseModel):
    case_number: str

class ParseResponse(BaseModel):
    success: bool
    message: str
    files: List[str] = []

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global parser, parsing_status
    
    # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("üîÑ –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
    parsing_status = {"is_parsing": False, "current_case": "", "progress": ""}
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ files
    files_dir = "files"
    if os.path.exists(files_dir):
        try:
            for filename in os.listdir(files_dir):
                file_path = os.path.join(files_dir, filename)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            logger.info("‚úÖ –ü–∞–ø–∫–∞ files –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É files: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
    parser = KadArbitrParser()
    
    # WebDriver –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ - –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
    logger.info("–ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω, WebDriver –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–∫—Ä—ã—Ç –≤ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ")
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞...")
    # WebDriver –±–æ–ª—å—à–µ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ - –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ–π
    logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–∫—Ä—ã—Ç")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="–ü–∞—Ä—Å–µ—Ä kad.arbitr.ru",
    description="–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª",
    version="1.0.0",
    lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "status": parsing_status
    })

@app.post("/parse")
async def parse_case(case_number: str = Form(...)):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–ª–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏–Ω–≥
    if parsing_status["is_parsing"]:
        logger.error("üõë –ü–ê–†–°–ò–ù–ì –£–ñ–ï –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø! –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        raise HTTPException(status_code=429, detail="–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ñ–ª–∞–≥ –≤ –ø–∞—Ä—Å–µ—Ä–µ
    if parser.is_processing:
        logger.error("üõë –ü–ê–†–°–ï–† –ó–ê–ù–Ø–¢! –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        raise HTTPException(status_code=429, detail="–ü–∞—Ä—Å–µ—Ä –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    if not case_number.strip():
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä –¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        async with parsing_semaphore:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            parsing_status["is_parsing"] = True
            parsing_status["current_case"] = case_number.strip()
            parsing_status["progress"] = "–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥..."
            
            logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞: {case_number}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                parsing_status["progress"] = "–ü–æ–∏—Å–∫ –¥–µ–ª–∞ –Ω–∞ —Å–∞–π—Ç–µ..."
                
                downloaded_files = await loop.run_in_executor(
                    None, 
                    parser.parse_case, 
                    case_number.strip()
                )
                
                parsing_status["progress"] = f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                if downloaded_files:
                    response_data = {
                        "success": True,
                        "message": f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤",
                        "files": downloaded_files,
                        "case_number": case_number.strip()
                    }
                    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    response_data = {
                        "success": False,
                        "message": "–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                        "files": [],
                        "case_number": case_number.strip()
                    }
                    logger.warning("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                from fastapi import Request
                request = Request(scope={"type": "http", "method": "POST"})
                return templates.TemplateResponse("result.html", {
                    "request": request,
                    "result": response_data,
                    "status": parsing_status
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                parsing_status["progress"] = f"–û—à–∏–±–∫–∞: {str(e)}"
                
                error_response = {
                    "success": False,
                    "message": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}",
                    "files": [],
                    "case_number": case_number.strip()
                }
                
                from fastapi import Request
                request = Request(scope={"type": "http", "method": "POST"})
                return templates.TemplateResponse("result.html", {
                    "request": request,
                    "result": error_response,
                    "status": parsing_status
                })
                
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        parsing_status["is_parsing"] = False
        parsing_status["current_case"] = ""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–∞—Ä—Å–µ—Ä–∞
        parser.is_processing = False
        logger.info("üîÑ –§–ª–∞–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã - –ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É")

@app.get("/api/parse/{case_number}")
async def api_parse_case(case_number: str):
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (JSON –æ—Ç–≤–µ—Ç)"""
    if parsing_status["is_parsing"]:
        raise HTTPException(status_code=429, detail="–ü–∞—Ä—Å–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    
    if not case_number.strip():
        raise HTTPException(status_code=400, detail="–ù–æ–º–µ—Ä –¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    try:
        async with parsing_semaphore:
            parsing_status["is_parsing"] = True
            parsing_status["current_case"] = case_number.strip()
            parsing_status["progress"] = "–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥..."
            
            logger.info(f"API –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ–ª–∞: {case_number}")
            
            loop = asyncio.get_event_loop()
            
            parsing_status["progress"] = "–ü–æ–∏—Å–∫ –¥–µ–ª–∞ –Ω–∞ —Å–∞–π—Ç–µ..."
            
            downloaded_files = await loop.run_in_executor(
                None, 
                parser.parse_case, 
                case_number.strip()
            )
            
            parsing_status["progress"] = f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}"
            
            if downloaded_files:
                logger.info(f"API –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤")
                return ParseResponse(
                    success=True,
                    message=f"–£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ {len(downloaded_files)} —Ñ–∞–π–ª–æ–≤",
                    files=downloaded_files
                )
            else:
                logger.warning("API –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return ParseResponse(
                    success=False,
                    message="–î–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    files=[]
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        parsing_status["progress"] = f"–û—à–∏–±–∫–∞: {str(e)}"
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        
    finally:
        parsing_status["is_parsing"] = False
        parsing_status["current_case"] = ""

@app.get("/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    return parsing_status

@app.get("/files", response_class=HTMLResponse)
async def files_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
    return templates.TemplateResponse("files.html", {"request": request})

@app.get("/api/files")
async def list_files():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files_dir = "files"
    file_names = []
    
    if os.path.exists(files_dir):
        try:
            for filename in os.listdir(files_dir):
                file_path = os.path.join(files_dir, filename)
                if os.path.isfile(file_path):
                    file_names.append(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ files: {e}")
    
    return {"files": file_names}

@app.get("/api/download/{filename}")
async def api_download_file(filename: str):
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    import urllib.parse
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∏–º—è —Ñ–∞–π–ª–∞
    decoded_filename = urllib.parse.unquote(filename)
    file_path = os.path.join("files", decoded_filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not os.path.isfile(file_path):
        raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ files (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    real_path = os.path.realpath(file_path)
    real_files_dir = os.path.realpath("files")
    
    if not real_path.startswith(real_files_dir):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
    safe_filename = decoded_filename
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O', 
        '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X', '–∞': 'a', '–≤': 'b', 
        '–µ': 'e', '–∫': 'k', '–º': 'm', '–Ω': 'h', '–æ': 'o', '—Ä': 'p', '—Å': 'c', 
        '—Ç': 't', '—É': 'y', '—Ö': 'x'
    }
    
    for cyr, lat in cyrillic_to_latin.items():
        safe_filename = safe_filename.replace(cyr, lat)
    
    return FileResponse(
        path=file_path,
        filename=safe_filename,
        media_type='application/pdf',
        headers={
            "Content-Disposition": f"attachment; filename*=UTF-8''{urllib.parse.quote(decoded_filename)}"
        }
    )

@app.get("/download/{filename}")
async def download_file(filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/download/{filename})"""
    import urllib.parse
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded –∏–º—è —Ñ–∞–π–ª–∞
    decoded_filename = urllib.parse.unquote(filename)
    file_path = os.path.join("files", decoded_filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not os.path.isfile(file_path):
        raise HTTPException(status_code=404, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ files (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
    real_path = os.path.realpath(file_path)
    real_files_dir = os.path.realpath("files")
    
    if not real_path.startswith(real_files_dir):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Disposition
    safe_filename = decoded_filename
    cyrillic_to_latin = {
        '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H', '–û': 'O', 
        '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X', '–∞': 'a', '–≤': 'b', 
        '–µ': 'e', '–∫': 'k', '–º': 'm', '–Ω': 'h', '–æ': 'o', '—Ä': 'p', '—Å': 'c', 
        '—Ç': 't', '—É': 'y', '—Ö': 'x'
    }
    
    for cyr, lat in cyrillic_to_latin.items():
        safe_filename = safe_filename.replace(cyr, lat)
    
    return FileResponse(
        path=file_path,
        filename=safe_filename,
        media_type='application/pdf',
        headers={
            "Content-Disposition": f"attachment; filename*=UTF-8''{urllib.parse.quote(decoded_filename)}"
        }
    )

@app.get("/clear")
async def clear_files():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ files"""
    if parsing_status["is_parsing"]:
        raise HTTPException(status_code=429, detail="–ù–µ–ª—å–∑—è –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    try:
        if parser:
            parser.cleanup_files_directory()
            logger.info("–ü–∞–ø–∫–∞ files –æ—á–∏—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            return {"message": "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/reinit-driver")
async def reinit_driver():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver"""
    global parser
    
    if parsing_status["is_parsing"]:
        raise HTTPException(status_code=429, detail="–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
    
    try:
        logger.info("–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥—Ä–∞–π–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if parser and parser.driver:
            parser.close()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
        parser = KadArbitrParser()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver
        if parser.init_driver():
            logger.info("WebDriver —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {"success": True, "message": "WebDriver —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver")
            return {"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WebDriver"}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"}

@app.get("/diagnostics", response_class=HTMLResponse)
async def diagnostics_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º"""
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    diagnostics_info = {
        "chrome_paths": [],
        "chromedriver_paths": [],
        "python_version": "",
        "selenium_version": "",
        "undetected_available": False,
        "webdriver_manager_cache": [],
        "driver_status": "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    }
    
    try:
        # Python –≤–µ—Ä—Å–∏—è
        import sys
        diagnostics_info["python_version"] = sys.version
        
        # Selenium –≤–µ—Ä—Å–∏—è
        try:
            import selenium
            diagnostics_info["selenium_version"] = selenium.__version__
        except:
            diagnostics_info["selenium_version"] = "–ù–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ undetected-chromedriver
        try:
            import undetected_chromedriver
            diagnostics_info["undetected_available"] = True
        except ImportError:
            diagnostics_info["undetected_available"] = False
        
        # –°—Ç–∞—Ç—É—Å –¥—Ä–∞–π–≤–µ—Ä–∞
        if parser and parser.driver:
            diagnostics_info["driver_status"] = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        else:
            diagnostics_info["driver_status"] = "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –ü–æ–∏—Å–∫ Chrome
        import subprocess
        import platform
        
        if platform.system() == "Windows":
            try:
                result = subprocess.run(['where', 'chrome'], capture_output=True, text=True)
                if result.returncode == 0:
                    diagnostics_info["chrome_paths"] = result.stdout.strip().split('\n')
            except:
                pass
        else:
            try:
                result = subprocess.run(['which', 'google-chrome'], capture_output=True, text=True)
                if result.returncode == 0:
                    diagnostics_info["chrome_paths"].append(result.stdout.strip())
            except:
                pass
        
        # –ö—ç—à WebDriverManager
        import os
        cache_dirs = [
            os.path.expanduser("~/.wdm"),
            os.path.join(os.path.expanduser("~"), "AppData", "Local", ".wdm")
        ]
        
        for cache_dir in cache_dirs:
            if os.path.exists(cache_dir):
                try:
                    for root, dirs, files in os.walk(cache_dir):
                        for file in files:
                            if 'chromedriver' in file.lower():
                                diagnostics_info["webdriver_manager_cache"].append(os.path.join(root, file))
                except:
                    pass
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    return templates.TemplateResponse("diagnostics.html", {
        "request": request,
        "diagnostics": diagnostics_info,
        "status": parsing_status
    })

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists("templates"):
        os.makedirs("templates")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç  
    if not os.path.exists("files"):
        os.makedirs("files")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ kad.arbitr.ru —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    uvicorn.run(
        "app:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )
