#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º—ã [object Object]
"""

import os
import tempfile
from fastapi.testclient import TestClient
from app import app, FILES_DIR

def test_object_object_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã [object Object]"""
    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã [object Object]...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_files = [
        "–ê84-4753_2024_20251006_104451_1_test1.pdf",
        "–ê84-4753_2024_20251006_104451_2_test2.pdf"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(FILES_DIR, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    for filename in test_files:
        file_path = os.path.join(FILES_DIR, filename)
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(f"Test PDF content for {filename}")
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é TestClient
    client = TestClient(app)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    print("\nüìã –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    response = client.get("/api/files")
    print(f"üìä –°—Ç–∞—Ç—É—Å /api/files: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"üìÅ –û—Ç–≤–µ—Ç API: {data}")
        
        if 'files' in data and len(data['files']) > 0:
            print("‚úÖ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ API")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏
            all_strings = all(isinstance(f, str) for f in data['files'])
            if all_strings:
                print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏")
            else:
                print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏")
                return False
        else:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\n‚¨áÔ∏è –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...")
    for filename in data['files']:
        print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}")
        
        import urllib.parse
        encoded_filename = urllib.parse.quote(filename)
        download_url = f"/api/download/{encoded_filename}"
        
        print(f"üîó URL: {download_url}")
        
        response = client.get(download_url)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.text}")
            return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ [object Object]
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ [object Object]...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL —Å [object Object]
    object_object_url = "/api/download/%5Bobject%20Object%5D"
    response = client.get(object_object_url)
    print(f"üìä –°—Ç–∞—Ç—É—Å –¥–ª—è [object Object]: {response.status_code}")
    
    if response.status_code == 404:
        print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 404 –¥–ª—è [object Object]")
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è [object Object]: {response.status_code}")
        return False
    
    return True

def test_cyrillic_filenames():
    """–¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º –∏–º–µ–Ω–µ–º
    test_filename = "—Ç–µ—Å—Ç_—Ñ–∞–π–ª_–∫–∏—Ä–∏–ª–ª–∏—Ü–∞.pdf"
    test_file_path = os.path.join(FILES_DIR, test_filename)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open(test_file_path, "w", encoding="utf-8") as f:
        f.write("Test PDF content with Cyrillic filename")
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_filename}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é TestClient
    client = TestClient(app)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    response = client.get("/api/files")
    if response.status_code == 200:
        data = response.json()
        if 'files' in data and test_filename in data['files']:
            print("‚úÖ –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
        else:
            print("‚ùå –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
    import urllib.parse
    encoded_filename = urllib.parse.quote(test_filename)
    download_url = f"/api/download/{encoded_filename}"
    
    print(f"üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {download_url}")
    
    response = client.get(download_url)
    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
    
    if response.status_code == 200:
        print("‚úÖ –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        return False

def cleanup_test_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    test_files = [
        "–ê84-4753_2024_20251006_104451_1_test1.pdf",
        "–ê84-4753_2024_20251006_104451_2_test2.pdf",
        "—Ç–µ—Å—Ç_—Ñ–∞–π–ª_–∫–∏—Ä–∏–ª–ª–∏—Ü–∞.pdf"
    ]
    
    for filename in test_files:
        file_path = os.path.join(FILES_DIR, filename)
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")

if __name__ == "__main__":
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º—ã [object Object]\n")
    
    # –¢–µ—Å—Ç 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ [object Object]
    success1 = test_object_object_fix()
    
    # –¢–µ—Å—Ç 2: –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    success2 = test_cyrillic_filenames()
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_test_files()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ [object Object]: {'–ü–†–û–ô–î–ï–ù' if success1 else '–ü–†–û–í–ê–õ–ï–ù'}")
    print(f"‚úÖ –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {'–ü–†–û–ô–î–ï–ù' if success2 else '–ü–†–û–í–ê–õ–ï–ù'}")
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ [object Object] –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("\nüìã –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ files –≤ backend")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã URL –≤ HTML —à–∞–±–ª–æ–Ω–∞—Ö backend")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JavaScript –∫–æ–¥–µ js_parser")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫, —Ç–∞–∫ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ frontend")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å [object Object] –≤ URL")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
