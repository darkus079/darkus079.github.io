"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Playwright –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π PDF –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
"""

import os
import asyncio
import logging
from typing import List, Dict, Any, Optional
from playwright.async_api import async_playwright, Browser, Page, BrowserContext

logger = logging.getLogger(__name__)

class PlaywrightPDFExtractor:
    """
    PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ Playwright
    """
    
    def __init__(self, files_dir: str):
        self.files_dir = files_dir
        self.browser: Optional[Browser] = None
        self.context: Optional[BrowserContext] = None
        self.page: Optional[Page] = None
    
    async def initialize(self, headless: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Playwright –±—Ä–∞—É–∑–µ—Ä
        
        Args:
            headless: –ó–∞–ø—É—Å–∫–∞—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ
        """
        try:
            logger.info("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright")
            
            self.playwright = await async_playwright().start()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            browser_args = [
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-web-security',
                '--disable-features=VizDisplayCompositor',
                '--window-size=1920,1080'
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.browser = await self.playwright.chromium.launch(
                headless=headless,
                args=browser_args
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.6843.82 Safari/537.36',
                locale='ru-RU',
                timezone_id='Europe/Moscow',
                permissions=['geolocation'],
                extra_http_headers={
                    'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                }
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.page = await self.context.new_page()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            await self._setup_request_interception()
            
            logger.info("‚úÖ Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright: {e}")
            raise
    
    async def _setup_request_interception(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not self.page:
            return
        
        logger.info("üï∏Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö PDF –∑–∞–ø—Ä–æ—Å–æ–≤
        self.pdf_requests = []
        
        async def handle_request(request):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
            url = request.url
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å PDF
            if self._is_pdf_request(request):
                logger.info(f"üéØ –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω PDF –∑–∞–ø—Ä–æ—Å: {url}")
                self.pdf_requests.append({
                    'url': url,
                    'method': request.method,
                    'headers': request.headers,
                    'timestamp': asyncio.get_event_loop().time()
                })
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç
        self.page.on('request', handle_request)
    
    def _is_pdf_request(self, request) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å PDF —Ñ–∞–π–ª–æ–º
        
        Args:
            request: Playwright request –æ–±—ä–µ–∫—Ç
            
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ PDF –∑–∞–ø—Ä–æ—Å
        """
        url = request.url.lower()
        headers = request.headers
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        url_indicators = [
            '.pdf',
            'document/pdf',
            'kad/pdfdocument',
            'pdfdocument',
            'getpdf',
            'document/getpdf'
        ]
        
        url_match = any(indicator in url for indicator in url_indicators)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        accept_header = headers.get('accept', '').lower()
        content_type = headers.get('content-type', '').lower()
        
        header_match = (
            'application/pdf' in accept_header or
            'application/pdf' in content_type or
            'application/octet-stream' in accept_header
        )
        
        return url_match or header_match
    
    async def navigate_to_case(self, case_url: str) -> bool:
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ–ª–∞
        
        Args:
            case_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ª–∞
            
        Returns:
            True –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
        """
        try:
            if not self.page:
                logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {case_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await self.page.goto(case_url, wait_until='networkidle', timeout=30000)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await self.page.wait_for_timeout(3000)
            
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}")
            return False
    
    async def get_page_content(self) -> tuple[str, List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ cookies
        
        Returns:
            Tuple (HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–ø–∏—Å–æ–∫ cookies)
        """
        try:
            if not self.page:
                return "", []
            
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            html_content = await self.page.content()
            
            # –ü–æ–ª—É—á–∞–µ–º cookies
            cookies = await self.context.cookies()
            
            logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤, {len(cookies)} cookies")
            
            return html_content, cookies
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
            return "", []
    
    async def wait_for_pdf_requests(self, timeout: int = 30) -> List[Dict[str, Any]]:
        """
        –ñ–¥–µ—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è PDF –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö PDF –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ PDF –∑–∞–ø—Ä–æ—Å–æ–≤ ({timeout}—Å)...")
        
        start_time = asyncio.get_event_loop().time()
        
        while (asyncio.get_event_loop().time() - start_time) < timeout:
            if self.pdf_requests:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.pdf_requests)} PDF –∑–∞–ø—Ä–æ—Å–æ–≤")
                break
            await asyncio.sleep(1)
        
        return self.pdf_requests.copy()
    
    async def download_intercepted_pdfs(self) -> List[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª—ã
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        if not self.pdf_requests:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö PDF –∑–∞–ø—Ä–æ—Å–æ–≤")
            return []
        
        downloaded_files = []
        
        for i, req_info in enumerate(self.pdf_requests):
            try:
                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF {i+1}: {req_info['url']}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await self.page.request.get(req_info['url'])
                
                if response.status == 200:
                    content = await response.body()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
                    if content.startswith(b'%PDF'):
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        import hashlib
                        url_hash = hashlib.md5(req_info['url'].encode()).hexdigest()[:8]
                        filename = f"playwright_{url_hash}.pdf"
                        filepath = os.path.join(self.files_dir, filename)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        with open(filepath, 'wb') as f:
                            f.write(content)
                        
                        downloaded_files.append(filepath)
                        logger.info(f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename} ({len(content)} –±–∞–π—Ç)")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ PDF —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {req_info['url']}")
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP {response.status}: {req_info['url']}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF {i+1}: {e}")
                continue
        
        return downloaded_files
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            if self.page:
                await self.page.close()
            if self.context:
                await self.context.close()
            if self.browser:
                await self.browser.close()
            if hasattr(self, 'playwright'):
                await self.playwright.stop()
            
            logger.info("‚úÖ Playwright –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Playwright: {e}")
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self.initialize()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        await self.close()


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class PlaywrightPDFExtractorSync:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è PlaywrightPDFExtractor
    """
    
    def __init__(self, files_dir: str):
        self.files_dir = files_dir
        self.extractor = None
    
    def extract_pdfs(self, case_url: str, timeout: int = 30) -> List[str]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è PDF —Ñ–∞–π–ª–æ–≤
        
        Args:
            case_url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ–ª–∞
            timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–∫–∞—á–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        async def _extract():
            async with PlaywrightPDFExtractor(self.files_dir) as extractor:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if not await extractor.navigate_to_case(case_url):
                    return []
                
                # –ñ–¥–µ–º PDF –∑–∞–ø—Ä–æ—Å–æ–≤
                await extractor.wait_for_pdf_requests(timeout)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º PDF —Ñ–∞–π–ª—ã
                return await extractor.download_intercepted_pdfs()
        
        try:
            return asyncio.run(_extract())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return []
