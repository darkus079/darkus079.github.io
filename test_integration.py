#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ frontend –∏ backend
"""

import requests
import time
import json
import sys
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://localhost:8000"
TEST_CASE_NUMBER = "–ê84-12036/2023"  # –¢–µ—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–µ–ª–∞

def test_backend_health():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend"""
    print("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
    
    try:
        response = requests.get(f"{BACKEND_URL}/api/health", timeout=5)
        
        if response.status_code == 200:
            health = response.json()
            print(f"‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω: {health['status']}")
            print(f"   –ü–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {health['parser_available']}")
            print(f"   –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {health['queue_size']}")
            return True
        else:
            print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    endpoints = [
        ("GET", "/api/status", "–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"),
        ("GET", "/api/files", "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"),
        ("GET", "/api/history", "–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"),
    ]
    
    success_count = 0
    
    for method, endpoint, description in endpoints:
        try:
            if method == "GET":
                response = requests.get(f"{BACKEND_URL}{endpoint}", timeout=5)
            else:
                response = requests.post(f"{BACKEND_URL}{endpoint}", timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ {description}: OK")
                success_count += 1
            else:
                print(f"‚ùå {description}: HTTP {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {description}: {e}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    return success_count == len(endpoints)

def test_parsing_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print(f"\nüîç –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ–ª–∞ {TEST_CASE_NUMBER}...")
    
    try:
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
        print("   üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥...")
        parse_response = requests.post(
            f"{BACKEND_URL}/api/parse",
            json={"case_number": TEST_CASE_NUMBER},
            timeout=10
        )
        
        if parse_response.status_code != 200:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: HTTP {parse_response.status_code}")
            return False
        
        parse_data = parse_response.json()
        print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: {parse_data['message']}")
        
        # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
        print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        max_wait_time = 300  # 5 –º–∏–Ω—É—Ç
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            status_response = requests.get(f"{BACKEND_URL}/api/status", timeout=5)
            
            if status_response.status_code == 200:
                status = status_response.json()
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {status['progress']}")
                
                if not status['is_parsing']:
                    print(f"   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    break
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: HTTP {status_response.status_code}")
                return False
            
            time.sleep(2)
        else:
            print("   ‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print("   üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        files_response = requests.get(f"{BACKEND_URL}/api/files", timeout=5)
        
        if files_response.status_code == 200:
            files_data = files_response.json()
            files_count = len(files_data['files'])
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}")
            
            if files_count > 0:
                print("   üìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:")
                for file_info in files_data['files'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"      - {file_info['name']} ({file_info['size']} –±–∞–π—Ç)")
                
                if files_count > 5:
                    print(f"      ... –∏ –µ—â–µ {files_count - 5} —Ñ–∞–π–ª–æ–≤")
                
                return True
            else:
                print("   ‚ö†Ô∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: HTTP {files_response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False

def test_cors_headers():
    """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
        response = requests.options(
            f"{BACKEND_URL}/api/parse",
            headers={
                "Origin": "https://darkus079.github.io",
                "Access-Control-Request-Method": "POST",
                "Access-Control-Request-Headers": "Content-Type"
            },
            timeout=5
        )
        
        if response.status_code == 200:
            cors_headers = {
                "Access-Control-Allow-Origin": response.headers.get("Access-Control-Allow-Origin"),
                "Access-Control-Allow-Methods": response.headers.get("Access-Control-Allow-Methods"),
                "Access-Control-Allow-Headers": response.headers.get("Access-Control-Allow-Headers"),
            }
            
            print("   ‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
            for header, value in cors_headers.items():
                if value:
                    print(f"      {header}: {value}")
                else:
                    print(f"      ‚ùå {header}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            return all(cors_headers.values())
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ CORS: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CORS: {e}")
        return False

def test_file_download():
    """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
    print("\nüîç –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files_response = requests.get(f"{BACKEND_URL}/api/files", timeout=5)
        
        if files_response.status_code != 200:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
            return False
        
        files_data = files_response.json()
        
        if not files_data['files']:
            print("   ‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return True
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        first_file = files_data['files'][0]
        filename = first_file['name']
        
        print(f"   üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {filename}")
        
        download_response = requests.get(
            f"{BACKEND_URL}/api/download/{filename}",
            timeout=10
        )
        
        if download_response.status_code == 200:
            content_length = len(download_response.content)
            print(f"   ‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {content_length} –±–∞–π—Ç")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {download_response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò FRONTEND –ò BACKEND")
    print("=" * 60)
    print(f"Backend URL: {BACKEND_URL}")
    print(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend", test_backend_health),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints),
        ("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", test_cors_headers),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–ª–∞", test_parsing_workflow),
        ("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞", test_file_download),
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è frontend –∏ backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–∏—Å–∞")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
